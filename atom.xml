<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xfFelix的博客</title>
  
  <subtitle>程序员的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-17T14:56:01.919Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xfFelix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS位运算技巧</title>
    <link href="http://yoursite.com/2020/06/17/js-bit-operator/"/>
    <id>http://yoursite.com/2020/06/17/js-bit-operator/</id>
    <published>2020-06-17T02:12:26.000Z</published>
    <updated>2020-06-17T14:56:01.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按位异或-实现变量交换"><a href="#按位异或-实现变量交换" class="headerlink" title="按位异或(^)实现变量交换"></a>按位异或(^)实现变量交换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>, b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 20 b = 10、</span></span><br><span class="line"></span><br><span class="line">[a, b] = [b, a]; <span class="comment">// ES6，解构赋值</span></span><br></pre></td></tr></table></figure><h2 id="使用左移运算符-lt-lt-迅速得出2的次方"><a href="#使用左移运算符-lt-lt-迅速得出2的次方" class="headerlink" title="使用左移运算符 (&lt;&lt;) 迅速得出2的次方"></a>使用左移运算符 (&lt;&lt;) 迅速得出2的次方</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">// 4, 即 2的2次方</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">10</span> <span class="comment">// 1024, 即 2的10次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是要注意使用场景</span></span><br><span class="line">a = <span class="number">2e9</span>;   <span class="comment">// 2000000000</span></span><br><span class="line">a &lt;&lt; <span class="number">1</span>;    <span class="comment">// -294967296</span></span><br></pre></td></tr></table></figure><h2 id="使用-切换变量-0-或-1"><a href="#使用-切换变量-0-或-1" class="headerlink" title="使用 ^ 切换变量 0 或 1"></a>使用 ^ 切换变量 0 或 1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --- before ---</span></span><br><span class="line"><span class="comment">// if 判断</span></span><br><span class="line"><span class="keyword">if</span> (toggle) &#123;</span><br><span class="line">    toggle = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    toggle = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三目运算符</span></span><br><span class="line">togle = toggle ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- after ---</span></span><br><span class="line">toggle ^= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="使用-amp-判断奇偶性"><a href="#使用-amp-判断奇偶性" class="headerlink" title="使用 &amp; 判断奇偶性"></a>使用 &amp; 判断奇偶性</h2><p>偶数 &amp; 1 = 0</p><p>奇数 &amp; 1 = 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> &amp; <span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; <span class="number">1</span>) ;   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="使用-将数字转为布尔值"><a href="#使用-将数字转为布尔值" class="headerlink" title="使用 !! 将数字转为布尔值"></a>使用 !! 将数字转为布尔值</h2><p>所有<code>非0</code>的值都是<code>true</code>，包括负数、浮点数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">7</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">-1</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0.71</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">false</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="使用-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-来取整"><a href="#使用-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-来取整" class="headerlink" title="使用~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|来取整"></a>使用~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|来取整</h2><p>相当于使用了 Math.floor()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~~<span class="number">11.71</span>)     <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &gt;&gt; <span class="number">0</span>)  <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &lt;&lt; <span class="number">0</span>)  <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> | <span class="number">0</span>)   <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 &gt;&gt;&gt; 不可对负数取整</p></blockquote><p><img src="/2020/06/17/js-bit-operator/1.jpg" alt></p><h2 id="使用-判断符号是否相同"><a href="#使用-判断符号是否相同" class="headerlink" title="使用^判断符号是否相同"></a>使用^判断符号是否相同</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a ^ b) &gt;= <span class="number">0</span>; <span class="comment">//  true 相同; false 不相同</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/17/js-bit-operator/2.jpg" alt></p><h2 id="使用-来检查数字是否不相等"><a href="#使用-来检查数字是否不相等" class="headerlink" title="使用^来检查数字是否不相等"></a>使用^来检查数字是否不相等</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --- before ---</span></span><br><span class="line"><span class="keyword">if</span> (a !== <span class="number">1171</span>) &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- after ---</span></span><br><span class="line"><span class="keyword">if</span> (a ^ <span class="number">1171</span>) &#123;...&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/17/js-bit-operator/3.jpg" alt></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(!(~+[])+&#123;&#125;)[--[~+<span class="string">""</span>][+[]]*[~+[]]+~~!+[]]+(&#123;&#125;+[])[[~!+[]]*~+[]]</span><br></pre></td></tr></table></figure><p>如果以后有人喷你的代码，你就可以将此代码发给他</p>]]></content>
    
    <summary type="html">
    
      (!(~+[])+{})[--[~+&quot;&quot;][+[]]*[~+[]]+~~!+[]]+({}+[])[[~!+[]]*~+[]]
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css开发小技巧</title>
    <link href="http://yoursite.com/2020/05/21/css-tips/"/>
    <id>http://yoursite.com/2020/05/21/css-tips/</id>
    <published>2020-05-21T09:08:23.000Z</published>
    <updated>2020-06-29T14:53:36.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英文字体g-p-q等字母显示不全"><a href="#英文字体g-p-q等字母显示不全" class="headerlink" title="英文字体g,p,q等字母显示不全"></a>英文字体g,p,q等字母显示不全</h2><p><img src="/2020/05/21/css-tips/1.png" alt></p><p>因为字体没有设置<code>line-height</code>,默认值为1，所以无法显示</p><p>解决：设置<code>line-height: 1.6</code></p><p><img src="/2020/05/21/css-tips/2.png" alt></p><h2 id="用CSS解决前端图片变形问题"><a href="#用CSS解决前端图片变形问题" class="headerlink" title="用CSS解决前端图片变形问题"></a>用CSS解决前端图片变形问题</h2><p>让图片始终显示在容器内，并且居中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">border: 2px solid red;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">max-width: 100%;</span><br><span class="line">max-height: 100%;</span><br><span class="line">position: absolute;</span><br><span class="line"> top: 50%;</span><br><span class="line"> left: 50%;</span><br><span class="line"> transform: translate(-50%, -50%); </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/2020/05/21/css-tips/3.jpg" alt></p><p>本文来自<a href="https://blog.csdn.net/caidingnu/article/details/92232872" target="_blank" rel="noopener">用CSS解决前端图片变形问题</a>.</p><h2 id="CSS设置背景图宽度100-，高度自适应"><a href="#CSS设置背景图宽度100-，高度自适应" class="headerlink" title="CSS设置背景图宽度100%，高度自适应"></a>CSS设置背景图宽度100%，高度自适应</h2><p>div的高度随背景图片的高度变化：</p><p>原理是通过padding-top或者padding-bottom实现，值是背景图片的<strong>宽高比</strong>。高度设置为0.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.newcenter</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../../assets/img/newcenter.png'</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.newcenter</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.newcenter</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../../assets/img/newcenter.png'</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">13%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css实现等比列缩小PC端页面，快速兼容移动端"><a href="#css实现等比列缩小PC端页面，快速兼容移动端" class="headerlink" title="css实现等比列缩小PC端页面，快速兼容移动端"></a>css实现等比列缩小PC端页面，快速兼容移动端</h2><p>给html设置最小宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谷歌下font-size小于12px无效"><a href="#谷歌下font-size小于12px无效" class="headerlink" title="谷歌下font-size小于12px无效"></a>谷歌下font-size小于<code>12px</code>无效</h2><p>这个bug只在PC端谷歌浏览器下才会出现，而且谷歌浏览器为中文版才有，英文版最小<code>fontsize</code>为<code>10px</code></p><p><strong>解决方案</strong></p><ul><li>不去管，安卓和ios都会支持</li><li>transform: scale(.5);</li></ul><blockquote><p><code>transform</code>的<code>scale</code>可以缩小放大容器，但是这个属性并不会改变原本标签（<code>div</code>之类）的大小，所以会出现留白</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;英文字体g-p-q等字母显示不全&quot;&gt;&lt;a href=&quot;#英文字体g-p-q等字母显示不全&quot; class=&quot;headerlink&quot; title=&quot;英文字体g,p,q等字母显示不全&quot;&gt;&lt;/a&gt;英文字体g,p,q等字母显示不全&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/202
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>JS开发小技巧</title>
    <link href="http://yoursite.com/2020/05/15/js-tips/"/>
    <id>http://yoursite.com/2020/05/15/js-tips/</id>
    <published>2020-05-15T07:20:20.000Z</published>
    <updated>2020-06-17T14:56:01.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arguments-对象转成数组"><a href="#arguments-对象转成数组" class="headerlink" title="arguments 对象转成数组"></a>arguments 对象转成数组</h2><p>arguments对象是函数内可访问的类数组对象，包含了传给函数的参数值。</p><p>但它跟数组又不太一样，虽然可以访问值和获取长度，却无法使用数组的其他方法。</p><p>所幸的是，我们可以很方便地把它转成普通的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h2 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h2><p>最容易想到的方法是用循环，但其实有更快捷的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> sum = numbers.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><h2 id="短路条件语句"><a href="#短路条件语句" class="headerlink" title="短路条件语句"></a>短路条件语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hungry) &#123;</span><br><span class="line">    goToFridge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码可以简化成布尔变量和函数调用组成的表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hungry &amp;&amp; goToFridge()</span><br></pre></td></tr></table></figure><h2 id="用逻辑或设置变量默认值"><a href="#用逻辑或设置变量默认值" class="headerlink" title="用逻辑或设置变量默认值"></a>用逻辑或设置变量默认值</h2><p>为了避免变量未定义（undefined）导致的运行时异常，可以通过逻辑或表达式给变量设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1</span>) </span>&#123; </span><br><span class="line">    arg1 = arg1 || <span class="number">32</span>; <span class="comment">// 如果 arg1 未设置，用 32 作为默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p>逗号操作符（,）从左到右计算每个操作数的值，并返回最后一个操作数的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x = (x++, x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">x = (<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="用-length-重新设置数组大小"><a href="#用-length-重新设置数组大小" class="headerlink" title="用 length 重新设置数组大小"></a>用 length 重新设置数组大小</h2><p>通过改变数组length的值，可以直接改变数组的大小，可用于调整数组大小或者清空数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 5  </span></span><br><span class="line"></span><br><span class="line">array.length = <span class="number">3</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 3  </span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [11,12,13]</span></span><br><span class="line"></span><br><span class="line">array.length = <span class="number">0</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 0  </span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="巧用数组解构赋值交换两个变量的值"><a href="#巧用数组解构赋值交换两个变量的值" class="headerlink" title="巧用数组解构赋值交换两个变量的值"></a>巧用数组解构赋值交换两个变量的值</h2><p>解构赋值是 ES6 新增的语法，可用于从数组提取元素，或者从对象提取属性值到单独的变量。这里用数组解构可以很方便地交换两个变量的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span></span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="数组元素随机排序（洗牌算法）"><a href="#数组元素随机排序（洗牌算法）" class="headerlink" title="数组元素随机排序（洗牌算法）"></a>数组元素随机排序（洗牌算法）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(list.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span></span><br><span class="line">&#125;)); </span><br><span class="line"><span class="comment">// [4, 8, 2, 9, 1, 3, 6, 5, 7]</span></span><br></pre></td></tr></table></figure><h2 id="对象动态属性名"><a href="#对象动态属性名" class="headerlink" title="对象动态属性名"></a>对象动态属性名</h2><p>这也是 ES6 新增的语法，可以通过变量的形式指定属性名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dynamic = <span class="string">'color'</span>;</span><br><span class="line"><span class="keyword">var</span> item = &#123;</span><br><span class="line">    brand: <span class="string">'Ford'</span>,</span><br><span class="line">    [dynamic]: <span class="string">'Blue'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item); </span><br><span class="line"><span class="comment">// &#123; brand: "Ford", color: "Blue" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>面试常考题，如果不考虑自己实现，可以通过Set方便地完成数组去重：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> my_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> unique_array = [...new <span class="built_in">Set</span>(my_array)];</span><br><span class="line"><span class="built_in">console</span>.log(unique_array); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="使用-includes-处理多重条件"><a href="#使用-includes-处理多重条件" class="headerlink" title="使用 includes 处理多重条件"></a>使用 includes 处理多重条件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(code === <span class="string">'202'</span> || code === <span class="string">'203'</span> || code === <span class="string">'204'</span>)&#123;</span><br><span class="line">  someMethod()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="string">'202'</span>,<span class="string">'203'</span>,<span class="string">'204'</span>].includes(code)) &#123;</span><br><span class="line">  someMethod()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="感叹号（-）-逻辑非"><a href="#感叹号（-）-逻辑非" class="headerlink" title="感叹号（!）-逻辑非"></a>感叹号（!）-逻辑非</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!<span class="number">1</span> <span class="comment">// false</span></span><br><span class="line">!<span class="number">-1</span> <span class="comment">// false</span></span><br><span class="line">!<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// false</span></span><br><span class="line">!&#123;&#125; <span class="comment">// false</span></span><br><span class="line">!<span class="string">''</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">NaN</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="双重感叹号（-）-双重逻辑非"><a href="#双重感叹号（-）-双重逻辑非" class="headerlink" title="双重感叹号（!!）-双重逻辑非"></a>双重感叹号（!!）-双重逻辑非</h2><p>这将显式强制将一个值转换为相应的布尔值。这与在已转换为布尔值的！value上加上一个感叹号（！）相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line">!!&#123;&#125; <span class="comment">// true</span></span><br><span class="line">!!(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)) <span class="comment">// true</span></span><br><span class="line">!!<span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line">!!<span class="string">''</span> <span class="comment">// false</span></span><br><span class="line">!!<span class="built_in">Boolean</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="转换成数字类型"><a href="#转换成数字类型" class="headerlink" title="(+) 转换成数字类型"></a>(+) 转换成数字类型</h2><h2 id="双星号（-）-求幂"><a href="#双星号（-）-求幂" class="headerlink" title="双星号（**）-求幂"></a>双星号（**）-求幂</h2><p>这与Math.pow（x，y）完全相同，后者等于x ^ y。你们中的许多人可能仅在需要时才使用Math.pow。该运算符将使代码更漂亮！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">3</span> === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 8</span></span><br><span class="line">-(<span class="number">2</span> ** <span class="number">2</span>) === -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">2</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="number">10</span> ** <span class="number">-1</span> === <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">-1</span>) <span class="comment">// 0.1</span></span><br></pre></td></tr></table></figure><h2 id="波浪号（〜）—-按位非"><a href="#波浪号（〜）—-按位非" class="headerlink" title="波浪号（〜）— 按位非"></a>波浪号（〜）— 按位非</h2><p>代字号（〜）是电脑键盘上数字1旁边的花键，它是JavaScript中的运算符，用于处理位。JavaScript（以及其他编程语言）在处理数字时会使用位。如果你不知道两个的补数，请查看Wikipedia中的文章，以了解JavaScript如何对负数起作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> (base <span class="number">10</span>) = <span class="number">00000000000000000000000000001001</span> (base <span class="number">2</span>)</span><br><span class="line">               --------------------------------</span><br><span class="line">~<span class="number">9</span> (base <span class="number">10</span>) = <span class="number">11111111111111111111111111110110</span> (base <span class="number">2</span>) = <span class="number">-10</span> (base <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>该公式实际上非常简单。如果整数是K，则〜K变为-（K +1）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">〜<span class="number">9</span> =&gt;-（（<span class="number">9</span> +<span class="number">1</span>）=&gt; <span class="number">-10</span>〜</span><br><span class="line"><span class="number">-10</span> =&gt;-（<span class="number">-10</span> +<span class="number">1</span>）=&gt; <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="Double-Tilde（-）—-Math-floor和Math-trunc"><a href="#Double-Tilde（-）—-Math-floor和Math-trunc" class="headerlink" title="Double Tilde（~~）— Math.floor和Math.trunc"></a>Double Tilde（~~）— Math.floor和Math.trunc</h2><p>正如 ！！从真假到真，从假真到假，双波浪号（~~）也将浮点数变成整数。单个波浪号（〜）对于数字不是按位的。最重要的一点是，从正变为负，或从负变为正。由于只有一个波浪号，所以我们只需增加一个波浪号即可将其恢复为原始符号号。但是，一旦将波浪号放在数字的开头，则小数点（。）右侧的浮点数将被忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">5.5</span> =&gt; <span class="number">-6</span></span><br><span class="line">~<span class="number">-6</span> =&gt; <span class="number">5</span></span><br><span class="line">~~<span class="number">5.5</span> === <span class="built_in">Math</span>.floor(<span class="number">5.5</span>) <span class="comment">// true</span></span><br><span class="line">~~<span class="number">-5.5</span> === <span class="built_in">Math</span>.trunc(<span class="number">-5.5</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>而且根据stackoverflow，这比Math.floor。当数字为负数时，Math.trunc将是适合你的数字。</p><h2 id="使用toString的双倍句号"><a href="#使用toString的双倍句号" class="headerlink" title="使用toString的双倍句号"></a>使用toString的双倍句号</h2><p>你对将十进制数字转换为二进制数字有什么了解？toString是将十进制更改为二进制的典型方法。它的常见用法可能是Number.toString。但是，也可以如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span>.toString（<span class="number">2</span>）<span class="comment">//'101'Number（</span></span><br><span class="line"><span class="number">5</span>）.toString（<span class="number">2</span>）=== <span class="number">5.</span>.toString（<span class="number">2</span>）<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="IIFE与运营商"><a href="#IIFE与运营商" class="headerlink" title="IIFE与运营商"></a>IIFE与运营商</h2><p>你如何用JavaScript编写IIFE（立即调用函数表达式）？最常见的方式可能是这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do your work</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但是，还有其他立即运行函数的方法，尽管并不常见。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = [];</span><br><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   msg.push(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.push(<span class="string">'World'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  msg.push(<span class="string">'!'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">~~<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.push(<span class="string">'My name'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.push(<span class="string">'is'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">!!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.push(<span class="string">'Moon'</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg.join(<span class="string">' '</span>)); <span class="comment">// Hello World ! My name is Moon</span></span><br></pre></td></tr></table></figure><p>你注意到这是如何工作的吗？主键是在其右侧放置一个运行操作数的运算符。例如，！5返回false。为什么？因为！计算5并确定！5应该为true，因为它是真实性值。这样，任何运行和评估操作数的运算符都可以运行后面的函数，因为还必须为其运算符运行和评估函数，例如!！或〜。</p><h2 id="Optional-Chaining-可选链式调用"><a href="#Optional-Chaining-可选链式调用" class="headerlink" title="Optional Chaining 可选链式调用"></a>Optional Chaining 可选链式调用</h2><p>大部分开发者都遇到过这个问题：</p><p><code>TypeError: Cannot read property ‘x’ of undefined</code></p><p>这个错误表示我们正在访问一个不属于对象的属性</p><h3 id="访问对象的属性"><a href="#访问对象的属性" class="headerlink" title="访问对象的属性"></a>访问对象的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flower = &#123;</span><br><span class="line">    colors: &#123;</span><br><span class="line">        red: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flower.colors.red) <span class="comment">// 正常运行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flower.species.lily) <span class="comment">// 抛出错误：TypeError: Cannot read property 'lily' of undefined</span></span><br></pre></td></tr></table></figure><p>在这种情况下，JavaScript 引擎会像这样抛出错误。但是某些情况下值是否存在并不重要，因为我们知道它会存在。于是，可选链式调用就派上用场了！</p><p>我们可以使用由一个问号和一个点组成的可选链式操作符，去表示不应该引发错误。如果没有值，应该返回 <strong>undefined</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(flower.species?.lily) <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><p>当访问数组或调用函数时，也可以使用可选链式调用。</p><h3 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flowers =  [<span class="string">'lily'</span>, <span class="string">'daisy'</span>, <span class="string">'rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flowers[<span class="number">1</span>]) <span class="comment">// 输出：daisy</span></span><br><span class="line"></span><br><span class="line">flowers = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flowers[<span class="number">1</span>]) <span class="comment">// 抛出错误：TypeError: Cannot read property '1' of null</span></span><br><span class="line"><span class="built_in">console</span>.log(flowers?.[<span class="number">1</span>]) <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> plantFlowers = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'orchids'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(plantFlowers()) <span class="comment">// 输出：orchids</span></span><br><span class="line"></span><br><span class="line">plantFlowers = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(plantFlowers()) <span class="comment">// 抛出错误：TypeError: plantFlowers is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(plantFlowers?.()) <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><h2 id="Nullish-Coalescing-空值合并"><a href="#Nullish-Coalescing-空值合并" class="headerlink" title="Nullish Coalescing 空值合并"></a>Nullish Coalescing 空值合并</h2><p>目前，要为变量提供回退值，逻辑操作符 || 还是必须的。它适用于很多情况，但不能应用在一些特殊的场景。例如，初始值是布尔值或数字的情况。举例说明，我们要把数字赋值给一个变量，当变量的初始值不是数字时，就默认其为 7 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> myNumber = number || <span class="number">7</span></span><br></pre></td></tr></table></figure><p>变量 myNumber 等于 1，因为左边的（number）是一个 真 值 1。但是，当变量 number 不是 1 而是 0 呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> myNumber = number || <span class="number">7</span></span><br></pre></td></tr></table></figure><p>0 是 <code>假</code> 值，所以即使 0 是数字。变量 <code>myNumber</code> 将会被赋值为右边的 <code>7</code>。但结果并不是我们想要的。幸好，由两个问号组成：<code>??</code> 的合并操作符就可以检查变量 <code>number</code> 是否是一个数字，而不用写额外的代码了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> myNumber = number ?? <span class="number">7</span></span><br></pre></td></tr></table></figure><p>操作符右边的值仅在左边的值等于 null 或 undefined 时有效，因此，例子中的变量 myNumber 现在的值等于 0 了。</p><h2 id="Private-Fields-私有字段"><a href="#Private-Fields-私有字段" class="headerlink" title="Private Fields 私有字段"></a>Private Fields 私有字段</h2><p>许多具有 classes 的编程语言允许定义类作为公共的，受保护的或私有的属性。Public 属性可以从类的外部或者子类访问，protected 属性只能被子类访问，private 属性只能被类内部访问。JavaScript 从 ES6 开始支持类语法，但直到现在才引入了私有字段。要定义私有属性，必须在其前面加上散列符号：<code>#</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">  #leaf_color = "green";</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get_color() &#123;</span><br><span class="line">    return this.#leaf_color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orchid = <span class="keyword">new</span> Flower(<span class="string">"orchid"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(orchid.get_color()); <span class="comment">// 输出：green</span></span><br><span class="line">console.log(orchid.#leaf_color) // 报错：SyntaxError: Private field '#leaf_color' must be declared in an enclosing class</span><br></pre></td></tr></table></figure><p>如果我们从外部访问类的私有属性，势必会报错。</p><h2 id="Static-Fields-静态字段"><a href="#Static-Fields-静态字段" class="headerlink" title="Static Fields 静态字段"></a>Static Fields 静态字段</h2><p>如果想使用类的方法，首先必须实例化一个类，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">  add_leaves() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Adding leaves"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rose = <span class="keyword">new</span> Flower();</span><br><span class="line">rose.add_leaves();</span><br><span class="line"></span><br><span class="line">Flower.add_leaves() <span class="comment">// 抛出错误：TypeError: Flower.add_leaves is not a function</span></span><br></pre></td></tr></table></figure><p>试图去访问没有实例化的 Flower 类的方法将会抛出一个错误。但由于 static 字段，类方法可以被 static 关键词声明然后从外部调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> create_flower(type) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Flower(type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rose = Flower.create_flower(<span class="string">"rose"</span>); <span class="comment">// 正常运行</span></span><br></pre></td></tr></table></figure><h2 id="Top-Level-Await-顶级-Await"><a href="#Top-Level-Await-顶级-Await" class="headerlink" title="Top Level Await 顶级 Await"></a>Top Level Await 顶级 Await</h2><p>目前，如果用 await 获取 promise 函数的结果，那使用 await 的函数必须用 async 关键字定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头疼的是，在全局作用域中去等待某些结果基本上是不可能的。除非使用 立即调用的函数表达式（IIFE）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>但引入了 顶级 Await 后，不需要再把代码包裹在一个 async 函数中了，如下即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url)</span><br></pre></td></tr></table></figure><p>这个特性对于解决模块依赖或当初始源无法使用而需要备用源的时候是非常有用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Vue = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'url_1_to_vue'</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    Vue = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'url_2_to_vue)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-allSettled-方法"><a href="#Promise-allSettled-方法" class="headerlink" title="Promise.allSettled 方法"></a>Promise.allSettled 方法</h2><p>等待多个 promise 返回结果时，我们可以用 <strong>Promise.all([promise_1, promise_2])</strong>。但问题是，如果其中一个请求失败了，就会抛出错误。然而，有时候我们希望某个请求失败后，其他请求的结果能够正常返回。针对这种情况 <strong>ES11</strong> 引入了 <strong>Promise.allSettled</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise_1 = <span class="built_in">Promise</span>.resolve(<span class="string">'hello'</span>)</span><br><span class="line">promise_2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> setTimeout(reject, <span class="number">200</span>, <span class="string">'problem'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([promise_1, promise_2])</span><br><span class="line">    .then(<span class="function">(<span class="params">[promise_1_result, promise_2_result]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(promise_1_result) <span class="comment">// 输出：&#123;status: 'fulfilled', value: 'hello'&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(promise_2_result) <span class="comment">// 输出：&#123;status: 'rejected', reason: 'problem'&#125;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>成功的 promise 将返回一个包含 <strong>status</strong> 和 <strong>value</strong> 的对象，失败的 promise 将返回一个包含 <strong>status</strong> 和 <strong>reason</strong> 的对象。</p><h2 id="Dynamic-Import-动态引入"><a href="#Dynamic-Import-动态引入" class="headerlink" title="Dynamic Import 动态引入"></a>Dynamic Import 动态引入</h2><p>你也许在 webpack 的模块绑定中已经使用过动态引入。但对于该特性的原生支持已经到来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Alert.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Alert.js 的文件</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'/components/Alert.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">Alert</span> =&gt;</span> &#123;</span><br><span class="line">        Alert.show()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>考虑到许多应用程序使用诸如 webpack 之类的模块打包器来进行代码的转译和优化，这个特性现在还没什么大作用。</p><h2 id="toString方法判断对象的类型"><a href="#toString方法判断对象的类型" class="headerlink" title="toString方法判断对象的类型"></a>toString方法判断对象的类型</h2><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p><p>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>) ; <span class="comment">//[object Window] window 是全局对象global 的引用</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;arguments-对象转成数组&quot;&gt;&lt;a href=&quot;#arguments-对象转成数组&quot; class=&quot;headerlink&quot; title=&quot;arguments 对象转成数组&quot;&gt;&lt;/a&gt;arguments 对象转成数组&lt;/h2&gt;&lt;p&gt;arguments对象是函数
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>marquee的实现方式</title>
    <link href="http://yoursite.com/2020/05/15/marquee/"/>
    <id>http://yoursite.com/2020/05/15/marquee/</id>
    <published>2020-05-15T06:55:44.000Z</published>
    <updated>2020-05-22T15:43:34.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swiper实现marquee-走马灯-效果"><a href="#Swiper实现marquee-走马灯-效果" class="headerlink" title="Swiper实现marquee(走马灯)效果"></a>Swiper实现marquee(走马灯)效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;swiper4 无缝轮播处理&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href="https:/</span><span class="regexp">/cdnjs.cloudflare.com/</span>ajax/libs/normalize/<span class="number">8.0</span><span class="number">.1</span>/normalize.min.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" href="</span>https:<span class="comment">//cdnjs.cloudflare.com/ajax/libs/Swiper/4.0.2/css/swiper.min.css"&gt;</span></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .swiper-container &#123;</span><br><span class="line">        height: <span class="number">100</span>px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .swiper-container&gt;.swiper-wrapper &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        transition-timing-<span class="function"><span class="keyword">function</span>: <span class="title">linear</span>;</span></span><br><span class="line"><span class="function">        -<span class="title">o</span>-<span class="title">transition</span>-<span class="title">timing</span>-<span class="title">function</span>: <span class="title">linear</span>;</span></span><br><span class="line"><span class="function">        -<span class="title">webkit</span>-<span class="title">transition</span>-<span class="title">timing</span>-<span class="title">function</span>: <span class="title">linear</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    .<span class="title">swiper</span>-<span class="title">slide</span> </span>&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: <span class="number">18</span>px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        <span class="comment">/* Center slide text vertically */</span></span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: -webkit-flex;</span><br><span class="line">        display: flex;</span><br><span class="line">        -webkit-box-pack: center;</span><br><span class="line">        -ms-flex-pack: center;</span><br><span class="line">        -webkit-justify-content: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        -webkit-box-align: center;</span><br><span class="line">        -ms-flex-align: center;</span><br><span class="line">        -webkit-align-items: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> style=<span class="string">"height:50px;background:red;"</span>&gt;Slide <span class="number">0</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="swiper-slide" style="height:50px;background:orange;"&gt;Slide 1&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> style=<span class="string">"height:50px;background:yellow;"</span>&gt;Slide <span class="number">2</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="swiper-slide" style="height:50px;background:green;"&gt;Slide 4&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> style=<span class="string">"height:50px;background:red;"</span>&gt;Slide <span class="number">5</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="swiper-slide" style="height:50px;background:bule;"&gt;Slide 6&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> style=<span class="string">"height:50px;background:indigo;"</span>&gt;Slide <span class="number">7</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/cdnjs.cloudflare.com/</span>ajax/libs/Swiper/<span class="number">4.0</span><span class="number">.2</span>/js/swiper.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    var mySwiper = new Swiper('.swiper-container', &#123;</span></span><br><span class="line"><span class="string">        slidesPerView: 2,</span></span><br><span class="line"><span class="string">        direction: 'horizontal',</span></span><br><span class="line"><span class="string">        freeMode: true,</span></span><br><span class="line"><span class="string">        speed: 2000,</span></span><br><span class="line"><span class="string">        loop: true,</span></span><br><span class="line"><span class="string">        autoplay: &#123;</span></span><br><span class="line"><span class="string">            delay: 0,</span></span><br><span class="line"><span class="string">            disableOnInteraction: false //就算触摸了也继续滚动</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Marquee标签实现走马灯效果"><a href="#Marquee标签实现走马灯效果" class="headerlink" title="Marquee标签实现走马灯效果"></a>Marquee标签实现走马灯效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee :scrollamount=<span class="string">"7"</span> loop=<span class="string">"infinite"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"link-url"</span> v-<span class="keyword">for</span>=<span class="string">"item in newList"</span> :key=<span class="string">"item.id"</span>&gt;</span><br><span class="line">    &#123;&#123;item.noticeTitle&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/m</span>arquee&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Swiper实现marquee-走马灯-效果&quot;&gt;&lt;a href=&quot;#Swiper实现marquee-走马灯-效果&quot; class=&quot;headerlink&quot; title=&quot;Swiper实现marquee(走马灯)效果&quot;&gt;&lt;/a&gt;Swiper实现marquee(走马灯)
      
    
    </summary>
    
    
      <category term="h5" scheme="http://yoursite.com/categories/h5/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="h5" scheme="http://yoursite.com/tags/h5/"/>
    
      <category term="swiper" scheme="http://yoursite.com/tags/swiper/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://yoursite.com/2020/04/27/nginx/"/>
    <id>http://yoursite.com/2020/04/27/nginx/</id>
    <published>2020-04-27T09:19:02.000Z</published>
    <updated>2020-06-29T14:53:36.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h2><p>官网：<a href="https://www.nginx.com/" target="_blank" rel="noopener">https://www.nginx.com/</a></p><p>下载：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><p>第一步：进入下载页面</p><p><img src="/2020/04/27/nginx/1.png" alt></p><p>第二步：选择系统（centos，Ubuntu）</p><p><img src="/2020/04/27/nginx/2.png" alt></p><p>第三步：根据提示，进行install</p><p><img src="/2020/04/27/nginx/3.png" alt></p><h2 id="nginx使用"><a href="#nginx使用" class="headerlink" title="nginx使用"></a>nginx使用</h2><h3 id="location匹配优先级顺序"><a href="#location匹配优先级顺序" class="headerlink" title="location匹配优先级顺序"></a>location匹配优先级顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=   // 进行普通字符精确匹配，也就是完全匹配 </span><br><span class="line">^~  // 表示普通字符匹配，使用前缀匹配</span><br><span class="line">~   // 正则匹配，区分大小写</span><br><span class="line">~*   // 正则匹配，不区分大小写</span><br></pre></td></tr></table></figure><h3 id="try-files的使用"><a href="#try-files的使用" class="headerlink" title="try_files的使用"></a>try_files的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br></pre></td></tr></table></figure><p>举例说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">    root /opt/html/;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /images/default.gif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如 请求 127.0.0.1/images/test.gif 会依次查找 </p><ol><li>文件<code>/opt/html/images/test.gif</code></li><li>文件夹 <code>/opt/html/images/test.gif/</code>下的<code>index</code>文件  </li><li>请求<code>127.0.0.1/images/default.gif</code></li></ol><p>关键点</p><ol><li>按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理</li><li>查找路径是按照给定的root或alias为根路径来查找的</li><li>如果给出的file都没有匹配到，则重新请求最后一个参数给定的uri，就是新的location匹配</li><li>如果最后一个参数是 = 404 ，若给出的file都没有匹配到，则最后返回404的响应码</li></ol><p><strong>Vue配置history</strong></p><p>一级域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /ticket &#123;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /ticket/index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rewrite的使用"><a href="#rewrite的使用" class="headerlink" title="rewrite的使用"></a>rewrite的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure><p>rewrite 的四个 flag</p><p>1.<code>last</code></p><p>停止处理当前的ngx_http_rewrite_module的指令集，并开始搜索与更改后的URI相匹配的location;</p><p>2.<code>break</code></p><p>停止处理当前的ngx_http_rewrite_module指令集，就像上面说的break指令一样;</p><p>3.<code>redirect</code></p><p>返回302临时重定向。(nginx关闭后失效)</p><p>4.<code>permanent</code></p><p>返回301永久重定向。(nginx关闭后依旧有效)</p><h3 id="alias与root的区别"><a href="#alias与root的区别" class="headerlink" title="alias与root的区别"></a>alias与root的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location /requestpath/images/ &#123;</span><br><span class="line">  root /local_path/image/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://www.baidu.com/request_path/images/map.html</span><br><span class="line">/local_path/image/requestpath/images/map.html</span><br><span class="line"></span><br><span class="line">location /requestpath/images/ &#123;</span><br><span class="line">  <span class="built_in">alias</span> /local_path/image/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://www.baidu.com/request_path/images/map.html</span><br><span class="line">/local_path/image/map.html</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>root</code>与<code>alias</code>末尾的<code>/</code>别忘了，不写是无法访问的，<code>location</code>属性末尾上的<code>/</code>是可以省略的</p></blockquote><h3 id="gzip配置"><a href="#gzip配置" class="headerlink" title="gzip配置"></a>gzip配置</h3><h4 id="1-服务器配置gzip压缩"><a href="#1-服务器配置gzip压缩" class="headerlink" title="1.服务器配置gzip压缩"></a>1.服务器配置gzip压缩</h4><p>Nginx是前端文件常用的服务器，Nginx服务器的配置文件nginx.conf的http模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># 开启gzip on为开启，off为关闭</span></span><br><span class="line">  gzip on;</span><br><span class="line">  <span class="comment"># 检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容，不存在则先压缩再返回</span></span><br><span class="line">  gzip_static on;</span><br><span class="line">  <span class="comment"># 设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。</span></span><br><span class="line">  <span class="comment"># 默认值是0，不管页面多大都压缩。</span></span><br><span class="line">  <span class="comment"># 建议设置成大于10k的字节数，配合compression-webpack-plugin</span></span><br><span class="line">  gzip_min_length 10k;</span><br><span class="line">  <span class="comment"># 对特定的MIME类型生效,其中'text/html’被系统强制启用</span></span><br><span class="line">  gzip_types text/javascript application/javascript text/css application/json;</span><br><span class="line">  <span class="comment"># Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果</span></span><br><span class="line">  <span class="comment"># 匹配的前提是后端服务器必须要返回包含"Via"的 header头</span></span><br><span class="line">  <span class="comment"># off(关闭所有代理结果的数据的压缩)</span></span><br><span class="line">  <span class="comment"># expired(启用压缩,如果header头中包括"Expires"头信息)</span></span><br><span class="line">  <span class="comment"># no-cache(启用压缩,header头中包含"Cache-Control:no-cache")</span></span><br><span class="line">  <span class="comment"># no-store(启用压缩,header头中包含"Cache-Control:no-store")</span></span><br><span class="line">  <span class="comment"># private(启用压缩,header头中包含"Cache-Control:private")</span></span><br><span class="line">  <span class="comment"># no_last_modefied(启用压缩,header头中不包含"Last-Modified")</span></span><br><span class="line">  <span class="comment"># no_etag(启用压缩,如果header头中不包含"Etag"头信息)</span></span><br><span class="line">  <span class="comment"># auth(启用压缩,如果header头中包含"Authorization"头信息)</span></span><br><span class="line">  <span class="comment"># any - 无条件启用压缩</span></span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  <span class="comment"># 请求加个 vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩</span></span><br><span class="line">  gzip_vary on;</span><br><span class="line">  <span class="comment"># 同 compression-webpack-plugin 插件一样，gzip压缩比（1~9），</span></span><br><span class="line">  <span class="comment"># 越小压缩效果越差，但是越大处理越慢，一般取中间值</span></span><br><span class="line">  gzip_comp_level 6;</span><br><span class="line">  <span class="comment"># 获取多少内存用于缓存压缩结果，‘16  8k’表示以8k*16 为单位获得。</span></span><br><span class="line">  <span class="comment"># PS: 如果没有.gz文件，是需要Nginx实时压缩的</span></span><br><span class="line">  gzip_buffers 16 8k;</span><br><span class="line">  <span class="comment"># 注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。</span></span><br><span class="line">  <span class="comment"># nginx反向代理gzip_http_version只支持http 1.0，配置1.1无效</span></span><br><span class="line">  gzip_http_version 1.0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-检查gzip是否生效"><a href="#2-检查gzip是否生效" class="headerlink" title="2.检查gzip是否生效"></a>2.检查gzip是否生效</h4><p>浏览器文件请求的请求头包含字段<code>Accept-Encoding</code>: <code>gzip</code>代表浏览器支持<code>gzip</code>压缩文件</p><p><img src="/2020/04/27/nginx/4.png" alt></p><p>文件响应头包含字段<code>Content-Encoding</code>: <code>gzip</code>代表返回的是压缩文件</p><p><img src="/2020/04/27/nginx/5.png" alt></p><p>同时<code>NetWork</code>一栏还可以查看到文件的实际大小和实际的请求（<code>gzip</code>）文件大小</p><p><img src="/2020/04/27/nginx/6.png" alt></p><h4 id="3-检查Nginx是否使用了我们提供的gz文件"><a href="#3-检查Nginx是否使用了我们提供的gz文件" class="headerlink" title="3.检查Nginx是否使用了我们提供的gz文件"></a>3.检查<code>Nginx</code>是否使用了我们提供的<code>gz</code>文件</h4><p><code>Nginx</code>自带<code>gzip</code>压缩功能，如果我们没提供，它会实时压缩（例如<code>index.html</code>文件），这就很浪费服务器资源了。现在我们已经提供<code>js</code>和<code>css</code>的<code>gz</code>文件，如何判断<code>Nginx</code>是使用了我们提供的<code>gz</code>文件，而不是自己压缩的呢？</p><p>上面有一个配置项：<code>gzip_static on</code>;，开启之后<code>Nginx</code>会优先使用我们的<code>gz</code>文件，但是还是不能确定，<code>Nginx</code>有没有使用<code>gz</code>文件。</p><p>查看<code>network</code>请求发现，每一个文件都有<code>etag</code>响应头，如果<code>Nginx</code>使用了已有的<code>gz</code>文件，那么这个请求的<code>etag</code>值不带有<code>W/</code>，反之，如果是文件是<code>Nginx</code>压缩的，<code>etag</code>值则会带有<code>W/</code>。</p><p>例如index.html:</p><p><img src="/2020/04/27/nginx/7.png" alt></p><p>拿chunk-vendors.js做一个实验，这个文件本身是带有gz文件的，请求的etag如下（不带有W/）：</p><p><img src="/2020/04/27/nginx/8.png" alt></p><p>这时候我们删掉服务器上chunk-vendors.js对应的gz文件，刷新页面，请求如下：</p><p><img src="/2020/04/27/nginx/9.png" alt></p><p>综上，我们就可以验证，只要我们配置了gzip_static on;，Nginx就会优先使用了我们提供的gz文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx简介&quot;&gt;&lt;a href=&quot;#nginx简介&quot; class=&quot;headerlink&quot; title=&quot;nginx简介&quot;&gt;&lt;/a&gt;nginx简介&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;https://www.nginx.com/&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>grid</title>
    <link href="http://yoursite.com/2020/04/23/grid/"/>
    <id>http://yoursite.com/2020/04/23/grid/</id>
    <published>2020-04-23T11:02:22.000Z</published>
    <updated>2020-05-22T15:43:34.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">grid</span>;</span><br><span class="line"><span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span> 1<span class="selector-tag">r</span>;</span><br><span class="line">// or </span><br><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(2, 1<span class="selector-tag">fr</span>);</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>grid在微信PC端兼容性不行，建议使用flex</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">flex-wrap</span>: <span class="selector-tag">wrap</span>;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">flex-basic</span>: <span class="number">50%</span>;</span><br><span class="line">  // or </span><br><span class="line">  <span class="selector-tag">flex</span>: 0 0 50%;</span><br><span class="line">  // or</span><br><span class="line">  <span class="selector-tag">width</span>: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，子元素不能使用<code>margin</code>,并且使用<code>padding</code>的时候必须加上<code>box-sizing：border-box;</code>属性，因为<code>margin</code>会使盒子模型的宽高增加，盒子模型默认的<code>box-sizing: content-box;</code>不包含内边距<code>padding</code>和边框<code>border</code>，所以使用padding必须带上<code>box-sizing：border-box;</code>，<code>margin</code>游离在<code>width</code>之外，所以不能使用<code>margin</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Grid布局&quot;&gt;&lt;a href=&quot;#Grid布局&quot; class=&quot;headerlink&quot; title=&quot;Grid布局&quot;&gt;&lt;/a&gt;Grid布局&lt;/h2&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>better-scroll</title>
    <link href="http://yoursite.com/2020/04/23/better-scroll/"/>
    <id>http://yoursite.com/2020/04/23/better-scroll/</id>
    <published>2020-04-23T10:42:20.000Z</published>
    <updated>2020-05-22T15:43:34.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BetterScroll"><a href="#BetterScroll" class="headerlink" title="BetterScroll"></a>BetterScroll</h2><p>官网：<a href="https://better-scroll.github.io/docs/zh-CN/" target="_blank" rel="noopener">https://better-scroll.github.io/docs/zh-CN/</a></p><p>github: <a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">https://github.com/ustbhuangyi/better-scroll</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="NPM安装"><a href="#NPM安装" class="headerlink" title="NPM安装"></a>NPM安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install @better-scroll/core@next --save</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">yarn add @better-scroll/core@next</span><br><span class="line"></span><br><span class="line">// use</span><br><span class="line">import BScroll from <span class="string">'@better-scroll/core'</span></span><br><span class="line"></span><br><span class="line">// or commonjs</span><br><span class="line">var BScroll = require(<span class="string">'@better-scroll/scroll'</span>)</span><br></pre></td></tr></table></figure><h3 id="Script加载"><a href="#Script加载" class="headerlink" title="Script加载"></a>Script加载</h3><p>BetterScroll 也支持直接用 script 加载的方式，加载后会在 window 上挂载一个 BScroll 的对象。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import BScroll from <span class="string">'@better-scroll/core'</span></span><br><span class="line"><span class="built_in">let</span> bs = new BScroll(<span class="string">'.wrapper'</span>, &#123;</span><br><span class="line">  // ...... 详见配置项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="在Vue中使用"><a href="#在Vue中使用" class="headerlink" title="在Vue中使用"></a>在Vue中使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"scroll-wrapper"</span> ref=<span class="string">"wrapper"</span> :style=<span class="string">"&#123;'height': height&#125;"</span>&gt;</span><br><span class="line">    &lt;slot&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import BScroll from '@better-scroll/</span>core<span class="string">'</span></span><br><span class="line"><span class="string">import MouseWheel from '</span>@better-scroll/mouse-wheel<span class="string">'</span></span><br><span class="line"><span class="string">import ObserveDOM from '</span>@better-scroll/observe-dom<span class="string">'</span></span><br><span class="line"><span class="string">import ScrollBar from '</span>@better-scroll/scroll-bar<span class="string">'</span></span><br><span class="line"><span class="string">import Pullup from '</span>@better-scroll/pull-up<span class="string">'</span></span><br><span class="line"><span class="string">import PullDown from '</span>@better-scroll/pull-down<span class="string">'</span></span><br><span class="line"><span class="string">import &#123; ScrollPosition &#125; from '</span>@/custom<span class="string">'</span></span><br><span class="line"><span class="string">import &#123; Vue, Component, Prop, Watch &#125; from '</span>vue-property-decorator<span class="string">'</span></span><br><span class="line"><span class="string">// 开启PC段鼠标滑轮</span></span><br><span class="line"><span class="string">BScroll.use(MouseWheel)</span></span><br><span class="line"><span class="string">// 开启数据更新监听</span></span><br><span class="line"><span class="string">BScroll.use(ObserveDOM)</span></span><br><span class="line"><span class="string">// 自定义scroll-bar样式</span></span><br><span class="line"><span class="string">BScroll.use(ScrollBar)</span></span><br><span class="line"><span class="string">// 开启下拉刷新功能</span></span><br><span class="line"><span class="string">BScroll.use(PullDown)</span></span><br><span class="line"><span class="string">// 开启上拉加载功能</span></span><br><span class="line"><span class="string">BScroll.use(Pullup)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Component</span></span><br><span class="line"><span class="string">export default class Scroll extends Vue&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  private scroll: any</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: true&#125;)</span></span><br><span class="line"><span class="string">  private scrollbar!: boolean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Number, default: 3&#125;)</span></span><br><span class="line"><span class="string">  private probeType!: number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: true&#125;)</span></span><br><span class="line"><span class="string">  private click!: boolean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: true&#125;)</span></span><br><span class="line"><span class="string">  private scrollY!: boolean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: false&#125;)</span></span><br><span class="line"><span class="string">  private scrollX: boolean | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Number, default: 20&#125;)</span></span><br><span class="line"><span class="string">  private refreshDelay: number | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: false&#125;)</span></span><br><span class="line"><span class="string">  private listenScroll: boolean | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: false&#125;)</span></span><br><span class="line"><span class="string">  private listenScrollEnd: boolean | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: false&#125;)</span></span><br><span class="line"><span class="string">  private listenTouchEnd: boolean | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: String, default: '</span><span class="number">100</span>%<span class="string">'&#125;)</span></span><br><span class="line"><span class="string">  private height: string | undefined</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Prop(&#123;type: Boolean, default: false&#125;)</span></span><br><span class="line"><span class="string">  private pullUpLoad!: boolean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Watch('</span>data<span class="string">', &#123;immediate: true, deep: true&#125;)</span></span><br><span class="line"><span class="string">  onDataChange(val: any[], oldVal: any[]) &#123;</span></span><br><span class="line"><span class="string">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      this.refresh()</span></span><br><span class="line"><span class="string">    &#125;, this.refreshDelay)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  beforeDestroy(): void &#123;</span></span><br><span class="line"><span class="string">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      this.scroll.destroy()</span></span><br><span class="line"><span class="string">    &#125;, 20)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  mounted(): void &#123;</span></span><br><span class="line"><span class="string">    // 保证在DOM渲染完毕后初始化better-scroll</span></span><br><span class="line"><span class="string">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      this._initScroll()</span></span><br><span class="line"><span class="string">    &#125;, 20)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  _initScroll() &#123;</span></span><br><span class="line"><span class="string">    if (!this.$refs.wrapper) &#123;</span></span><br><span class="line"><span class="string">      return</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // better-scroll的初始化</span></span><br><span class="line"><span class="string">    this.scroll = new BScroll(this.$refs.wrapper as HTMLElement, &#123;</span></span><br><span class="line"><span class="string">      probeType: this.probeType,</span></span><br><span class="line"><span class="string">      click: this.click,</span></span><br><span class="line"><span class="string">      scrollX: this.scrollX,</span></span><br><span class="line"><span class="string">      // PC端滑轮</span></span><br><span class="line"><span class="string">      mouseWheel: &#123;</span></span><br><span class="line"><span class="string">        speed: 20,</span></span><br><span class="line"><span class="string">        invert: false,</span></span><br><span class="line"><span class="string">        easeTime: 300</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      // 数据监听</span></span><br><span class="line"><span class="string">      observeDOM: true,</span></span><br><span class="line"><span class="string">      // 开启scrollbar样式</span></span><br><span class="line"><span class="string">      scrollbar: this.scrollbar,</span></span><br><span class="line"><span class="string">      pullUpLoad: this.pullUpLoad</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    this.$emit('</span>setScroll<span class="string">', this.scroll);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (this.listenScroll) &#123;</span></span><br><span class="line"><span class="string">      this.scroll.on('</span>scroll<span class="string">', (pos: ScrollPosition) =&gt; &#123;</span></span><br><span class="line"><span class="string">        this.$emit('</span>scroll<span class="string">', pos)</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (this.listenScrollEnd) &#123;</span></span><br><span class="line"><span class="string">      this.scroll.on('</span>scrollEnd<span class="string">', (pos: ScrollPosition) =&gt; &#123;</span></span><br><span class="line"><span class="string">        this.$emit('</span>scrollEnd<span class="string">', pos)</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (this.listenTouchEnd) &#123;</span></span><br><span class="line"><span class="string">      this.scroll.on('</span>touchEnd<span class="string">', (pos: ScrollPosition) =&gt; &#123;</span></span><br><span class="line"><span class="string">        this.$emit('</span>touchEnd<span class="string">', pos)</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (this.pullUpLoad) &#123;</span></span><br><span class="line"><span class="string">      this.scroll.on('</span>pullingUp<span class="string">', () =&gt; this.$emit('</span>pull-up-handler<span class="string">'))</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  refresh() &#123;</span></span><br><span class="line"><span class="string">    // 代理better-scroll的refresh方法</span></span><br><span class="line"><span class="string">    this.scroll &amp;&amp; this.scroll.refresh()</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  stop () &#123;</span></span><br><span class="line"><span class="string">    console.log(this.scroll)</span></span><br><span class="line"><span class="string">    this.scroll &amp;&amp;  this.scroll.stop()</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  enable() &#123;</span></span><br><span class="line"><span class="string">    this.scroll &amp;&amp;  this.scroll.enable()</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  scrollTo() &#123;</span></span><br><span class="line"><span class="string">    this.scroll &amp;&amp;  this.scroll.scrollTo.apply(this.scroll, arguments);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  scrollToElement() &#123;</span></span><br><span class="line"><span class="string">    this.scroll &amp;&amp;  this.scroll.scrollToElement.apply(this.scroll, arguments);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="string">.scroll-wrapper&#123;</span></span><br><span class="line"><span class="string">  box-sizing: border-box;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  padding-bottom: constant(safe-area-inset-bottom, 50px);</span></span><br><span class="line"><span class="string">  padding-bottom: env(safe-area-inset-bottom, 50px);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>必须只有一个子元素，多个元素会引起滚动条失灵</li><li>父元素必须有准确的高度，不能随子元素的高度而增加</li><li>减少使用<code>vh</code>作为单位，<code>100vh</code>作为全屏高度会受到浏览器的顶部搜索栏和底部导航栏的影响</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BetterScroll&quot;&gt;&lt;a href=&quot;#BetterScroll&quot; class=&quot;headerlink&quot; title=&quot;BetterScroll&quot;&gt;&lt;/a&gt;BetterScroll&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;https://better-scr
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓包工具的使用</title>
    <link href="http://yoursite.com/2020/04/02/fiddler/"/>
    <id>http://yoursite.com/2020/04/02/fiddler/</id>
    <published>2020-04-02T03:00:17.000Z</published>
    <updated>2020-05-22T15:43:34.151Z</updated>
    
    <content type="html"><![CDATA[<p>Fiddler和charles是最强大最好用的Web调试工具，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据。</p><blockquote><p>Fiddler4实现手机抓包的前提是：电脑要和手机连在同一网络！</p></blockquote><p>参考步骤：</p><h2 id="一-、电脑下载Fiddler"><a href="#一-、电脑下载Fiddler" class="headerlink" title="(一)、电脑下载Fiddler"></a>(一)、电脑下载Fiddler</h2><p><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler官网</a></p><h2 id="二-、配置Fildder参数"><a href="#二-、配置Fildder参数" class="headerlink" title="(二)、配置Fildder参数"></a>(二)、配置Fildder参数</h2><h3 id="1、配置fiddler允许监听到https"><a href="#1、配置fiddler允许监听到https" class="headerlink" title="1、配置fiddler允许监听到https;"></a>1、配置fiddler允许监听到https;</h3><p>Tools&gt;options&gt;HTTPS</p><img src="/2020/04/02/fiddler/1.webp" class="" title="null"><h3 id="2、配置fiddler允许远程连接"><a href="#2、配置fiddler允许远程连接" class="headerlink" title="2、配置fiddler允许远程连接;"></a>2、配置fiddler允许远程连接;</h3><p>Tools&gt;options&gt;Connections</p><img src="/2020/04/02/fiddler/2.webp" class="" title="null"><blockquote><p>踩坑提示：配置好一定要重启Fiddler,同步配置参数！</p></blockquote><h3 id="3、对手机端进行参数配置"><a href="#3、对手机端进行参数配置" class="headerlink" title="3、对手机端进行参数配置"></a>3、对手机端进行参数配置</h3><p>①更改手机WiFi的代理<br><br>选择和电脑连接的同一网络，修改网络：</p><img src="/2020/04/02/fiddler/3.webp" class="" title="null"><img src="/2020/04/02/fiddler/4.webp" class="" title="null"><p>②打开手机浏览器，输入<a href="http://ip:端口号，点击前往：">http://ip:端口号，点击前往：</a></p><img src="/2020/04/02/fiddler/5.webp" class="" title="null"><img src="/2020/04/02/fiddler/6.webp" class="" title="null"><p>配置完成后，可以在手机进行操作了，之后在fiddler中可以看到操作的http信息说明已经配置成功了。</p><img src="/2020/04/02/fiddler/7.webp" class="" title="null"><h2 id="三-、fiddlerFiddler-突然不能抓取请求了"><a href="#三-、fiddlerFiddler-突然不能抓取请求了" class="headerlink" title="(三)、fiddlerFiddler 突然不能抓取请求了"></a>(三)、fiddlerFiddler 突然不能抓取请求了</h2><p>提供解决思路：<br>1、是否有新安装代理相关的插件？<br>如有安装管理代理的插件（比如shadowsocks），插件会屏蔽Fiddler的设置，此时把插件禁掉、或者设置默认的代理就可以解决了。</p><p>2、手机端无法抓取抓取好看视频，试试使用安卓模拟器，例如（雷电，夜神。。。），和手机端配置相同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Fiddler和charles是最强大最好用的Web调试工具，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fiddler4实现手机抓包的前提是：电脑要和手机连在同一网络！&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Fiddler" scheme="http://yoursite.com/categories/Fiddler/"/>
    
    
      <category term="fiddler" scheme="http://yoursite.com/tags/fiddler/"/>
    
  </entry>
  
  <entry>
    <title>flutter-state</title>
    <link href="http://yoursite.com/2020/03/31/flutter-state/"/>
    <id>http://yoursite.com/2020/03/31/flutter-state/</id>
    <published>2020-03-31T10:14:34.000Z</published>
    <updated>2020-05-22T15:43:34.154Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是StatelessWidget</li><li>什么是StatefulWidget</li><li>什么是StatelessWidget和StatefulWidget最佳实践</li></ul><p>状态是在构建widget时可以同步读取的信息，或者在widget的生命周期中可能更改的信息，在Flutter中如果要管理状态需要用到<code>StatefulWidget</code></p><h2 id="什么是StatelessWidget"><a href="#什么是StatelessWidget" class="headerlink" title="什么是StatelessWidget"></a>什么是StatelessWidget</h2><p>Flutter中的<code>StatelessWidget</code>是一个不需要状态更改的widget - 它没有要管理的内部状态。</p><p>当您描述的用户界面部分不依赖于对象本身中的配置信息以及widget的BuildContext时，无状态widget非常有用。</p><p><code>AboutDialog</code>，<code>CircleAvatar</code>和<code>Text</code>都是StatelessWidget的子类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyStatelessWidget(text: <span class="string">'Stateless Example'</span>));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStatelessWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  final <span class="built_in">String</span> text;</span><br><span class="line"></span><br><span class="line">  MyStatelessWidget(&#123;Key key, <span class="keyword">this</span>.text&#125;):<span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">        text,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面的示例中，您使用了MyStatelessWidget类的构造函数，传递标记为final的text。这个类继承了StatelessWidget-它包含不可变数据</p><p>无状态widget的build方法通常只会在以下三种情况调用：</p><ul><li><p>将widget插入树中时</p></li><li><p>当widget的父级更改其配置时</p></li><li><p>当它依赖的<code>InheritedWidget</code>发生变化时</p></li></ul><h2 id="什么是StatefulWidget"><a href="#什么是StatefulWidget" class="headerlink" title="什么是StatefulWidget"></a>什么是StatefulWidget</h2><p>StatefulWidget是可变状态的widget。使用<code>setState</code>方法管理StatefulWidget的状态的改变。调用<code>setState</code>告诉Flutter框架，某个状态发生了变化，Flutter会重新运行<code>build</code>方法，以便应用程序可以应用最新状态。</p><p>状态是在构建widget时可以同步读取的信息可能会在widget的生命周期中发生变化。确保在状态改变时及时通知状态变化是widget实现者的责任。当widget可以动态更改时，需要使用StatefulWidget.例如，通过键入表单或移动滑块来更改widget的状态。或者，它可以随时间变化 - 或者数据推送更新UI</p><p><code>Checkbox</code>,<code>Radio</code>,<code>Slider</code>,<code>InkWell</code>,<code>Form</code>和<code>TextField</code>都是有状态的widget，也是StatefulWidget的子类</p><p>下面的示例声明了一个StatefulWidget，它需要一个<code>createState()</code>方法。此方法创建管理widget状态的状态对象_MyStatefulWidgetState。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStatelessWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  MyStatelessWidget(&#123;Key key, <span class="keyword">this</span>.title&#125;): <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  final <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _MyStatefulWidgetState createState()  =&gt; _MyStatefulWidgetState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下状态类_MyStatefulWidgetState实现widget的build方法，当状态改变时，例如，当用户切换按钮时，使用新的切换值调用<code>setState</code>。这会导致框架在UI中重建此widget。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyStatefulWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyStatelessWidget</span>&gt; </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是StatelessWidget和StatefulWidget最佳实践"><a href="#什么是StatelessWidget和StatefulWidget最佳实践" class="headerlink" title="什么是StatelessWidget和StatefulWidget最佳实践"></a>什么是StatelessWidget和StatefulWidget最佳实践</h2><p>在设计widget时，需要考虑以下几点</p><blockquote><p>确定widget应该使用StatefulWidget还是StatelessWidget</p></blockquote><p><strong>在Flutter中，widget时有状态的还是无状态的 - 取决于是否他们依赖于状态的变化</strong></p><ul><li>如果用户交互或数据改变导致widget改变，那么它就是有状态的</li><li>如果一个widget是最终的或不可变的，南无它就是无状态的</li></ul><blockquote><p>1.确定哪个对象管理widget的状态（对于StatefulWidget）在Flutter中，管理状态有三种主要方式：</p></blockquote><ul><li>每个widget管理自己的状态</li><li>父widget管理widget的状态</li><li>混合搭配管理的方法</li></ul><p>如何决定使用哪种方式时，可以参考以下原则：</p><ul><li>如果讨论的状态时用户数据，例如复选框的已选中或未选中状态，或滑块的位置，则状态最好由父widget管理</li><li>如果widget的状态取决于动作，例如动画，那么最好是由widget自身来管理状态</li><li>如果还是不确定谁管理状态，请让父widget管理子widget的状态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;什么是StatelessWidget&lt;/li&gt;
&lt;li&gt;什么是StatefulWidget&lt;/li&gt;
&lt;li&gt;什么是StatelessWidget和StatefulWidget最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态是在构建widget时可以同步读取的信息，或
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>win10_simple</title>
    <link href="http://yoursite.com/2020/03/30/win10-simple/"/>
    <id>http://yoursite.com/2020/03/30/win10-simple/</id>
    <published>2020-03-30T03:57:25.000Z</published>
    <updated>2020-05-22T15:43:34.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打造自己的win10精简系统（超详细）"><a href="#打造自己的win10精简系统（超详细）" class="headerlink" title="打造自己的win10精简系统（超详细）"></a>打造自己的win10精简系统（超详细）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近几年来微软对win10的推广策略层出不穷，甚至与 Intel联合宣布最新硬件不在支持Win7，以迫使用户向win10转移，但不得不承认win10系统性能各方面更优于win7系统。可是win10系统太多的自带软件，让我这种有洁癖的人很难受，我喜欢纯洁如处子般的系统——精简版系统。</p><p>那些网上下载的精简版，装在自己的电脑上，总让我感觉是穿了在路边捡来的别人的衣服，而且偶尔还能从衣兜里掏出不知道什么玩意儿的东西（比如，360全家桶，百度全家桶，毒霸，腾讯视频等等），这着实让人不舒服。</p><p>为此，我要打造属于我自己的win10精简系统，于是开始收集工具，整理资料，并记录如下</p><h2 id="一、工具需求"><a href="#一、工具需求" class="headerlink" title="一、工具需求"></a>一、工具需求</h2><p>1.MediaCreationTool</p><p>2.NTLite_setup_x64.exe</p><h2 id="二、开始操作"><a href="#二、开始操作" class="headerlink" title="二、开始操作"></a>二、开始操作</h2><h3 id="1-工具和系统的获取"><a href="#1-工具和系统的获取" class="headerlink" title="1.工具和系统的获取"></a>1.工具和系统的获取</h3><h3 id="I-win10系统的获取"><a href="#I-win10系统的获取" class="headerlink" title="I.win10系统的获取"></a>I.win10系统的获取</h3><h4 id="1-将下面链接复制到任意浏览器地址栏（微软官网链接，选系统，我相信官网）"><a href="#1-将下面链接复制到任意浏览器地址栏（微软官网链接，选系统，我相信官网）" class="headerlink" title="1.将下面链接复制到任意浏览器地址栏（微软官网链接，选系统，我相信官网）"></a>1.将下面链接复制到任意浏览器地址栏（微软官网链接，选系统，我相信官网）</h4><p><a href="https://www.microsoft.com/zh-cn/software-download/windows10/" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/software-download/windows10/</a></p><p>网址界面，点击“立即下载工具”</p><img src="/2020/03/30/win10-simple/1.jpg" class="" title="null"><h4 id="2-打开MediaCreationTool工具"><a href="#2-打开MediaCreationTool工具" class="headerlink" title="2.打开MediaCreationTool工具"></a>2.打开MediaCreationTool工具</h4><img src="/2020/03/30/win10-simple/2.jpg" class="" title="null"><p>点击“接受”</p><img src="/2020/03/30/win10-simple/3.jpg" class="" title="null"><p>点击“为另一台电脑创建安装介质(U盘、DVD、或IOS文件)”，并选择“下一步”</p><img src="/2020/03/30/win10-simple/4.jpg" class="" title="null"><p>或者</p><img src="/2020/03/30/win10-simple/5.jpg" class="" title="null"><p>根据自己的需求，选择“语言”、“版本”、“体系结构” 或者直接选择 “对这台电脑使用推荐的选项” ，然后点击“下一步”</p><img src="/2020/03/30/win10-simple/6.jpg" class="" title="null"><p>选择“IOS文件”，“下一步”</p><img src="/2020/03/30/win10-simple/7.jpg" class="" title="null"><p>这一步会让你选择下载系统保存的位置，选择好之后点击“保存”（为了操作方便，我直接保存在桌面了）</p><img src="/2020/03/30/win10-simple/8.jpg" class="" title="null"><p>工具开始下载win10系统</p><img src="/2020/03/30/win10-simple/9.jpg" class="" title="null"><p>下载完成后，工具会自动创建win10系统的安装介质</p><img src="/2020/03/30/win10-simple/10.jpg" class="" title="null"><p>创建完成之后，直接点击“完成”即可</p><img src="/2020/03/30/win10-simple/11.jpg" class="" title="null"><p>桌面上(你自己选择的保存路径)，就会的到一个win10的系统镜像。</p><img src="/2020/03/30/win10-simple/12.jpg" class="" title="null"><p>新建一个文件夹</p><img src="/2020/03/30/win10-simple/13.jpg" class="" title="null"><p>双击win10镜像</p><img src="/2020/03/30/win10-simple/14.jpg" class="" title="null"><p>打开之后，会看到镜像包含的文件</p><img src="/2020/03/30/win10-simple/15.jpg" class="" title="null"><p>将里面所有的文件都复制到，刚刚新建的文件夹（666文件夹）中。</p><h3 id="II-精简工具的下载与安装"><a href="#II-精简工具的下载与安装" class="headerlink" title="II.精简工具的下载与安装"></a>II.精简工具的下载与安装</h3><h4 id="1-同样，复制下面的链接到浏览器地址栏"><a href="#1-同样，复制下面的链接到浏览器地址栏" class="headerlink" title="1.同样，复制下面的链接到浏览器地址栏"></a>1.同样，复制下面的链接到浏览器地址栏</h4><p><a href="https://www.ntlite.com/download/" target="_blank" rel="noopener">https://www.ntlite.com/download/</a></p><p>网页界面，有两个版本“Stable version(稳定版)” 和 “Beta version(测试版)”，这里建议使用稳定版的</p><img src="/2020/03/30/win10-simple/16.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/17.jpg" class="" title="null"><p>根据自己的系统，下载64位或者32位的工具，我的系统是64位的</p><img src="/2020/03/30/win10-simple/18.jpg" class="" title="null"><p>下载完成后，找到工具，然后双击运行</p><img src="/2020/03/30/win10-simple/19.jpg" class="" title="null"><p>点击“我同意此协议”，然后就是傻瓜式的“下一步”、“下一步”的安装操作，这里就不一一演示了。</p><img src="/2020/03/30/win10-simple/20.jpg" class="" title="null"><p>安装完成后，打开界面如上</p><h4 id="2-开始精简操作"><a href="#2-开始精简操作" class="headerlink" title="2.开始精简操作"></a>2.开始精简操作</h4><h4 id="1-初步精简（去除多余系统）"><a href="#1-初步精简（去除多余系统）" class="headerlink" title="1.初步精简（去除多余系统）"></a>1.初步精简（去除多余系统）</h4><img src="/2020/03/30/win10-simple/21.jpg" class="" title="null"><p>打开精简工具，点击“添加”，选择“映像文件夹”</p><img src="/2020/03/30/win10-simple/22.jpg" class="" title="null"><p>找到，你复制有win10镜像文件的文件夹，我的是“666”文件夹，点击“选择文件夹”</p><img src="/2020/03/30/win10-simple/23.jpg" class="" title="null"><p>镜像文件会被 精简工具解析，解析结果如上图</p><img src="/2020/03/30/win10-simple/24.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/25.jpg" class="" title="null"><p>在我们不需要的项目上右击，然后“删除”</p><img src="/2020/03/30/win10-simple/26.jpg" class="" title="null"><p>我喜欢专业版的，所以我只留了专业版，到这里我们只是去除了不需要的系统，下面我们开始对自己喜欢的系统进行更深度的精简，以便于我们更喜欢它。</p><h4 id="2-深度精简（清除多余自带程序）"><a href="#2-深度精简（清除多余自带程序）" class="headerlink" title="2.深度精简（清除多余自带程序）"></a>2.深度精简（清除多余自带程序）</h4><img src="/2020/03/30/win10-simple/27.jpg" class="" title="null"><p>鼠标右击自己喜欢的系统，点击”加载“（若无法直接加载系统，也可以加载install.esd文件）</p><img src="/2020/03/30/win10-simple/28.jpg" class="" title="null"><p>加载完成后，在左边栏就多了很多选项</p><img src="/2020/03/30/win10-simple/29.jpg" class="" title="null"><p><strong>a.“组件移除”部分的精简</strong></p><p>点击“组件移除”，会弹出一个警告框，可以自行仔细阅读，然后点击“确定”</p><img src="/2020/03/30/win10-simple/30.jpg" class="" title="null"><p>接下来我们可以看到系统自带的组件，”IOS镜像“组件是不建议操作的</p><img src="/2020/03/30/win10-simple/31.jpg" class="" title="null"><p>”Windows App“组件下的 ”Metro 应用“中大多数是可以去除的，去除方法就是把选项前面的 ” √ “ 取消勾选</p><img src="/2020/03/30/win10-simple/32.jpg" class="" title="null"><p>至于都对应了什么，有兴趣的同学可以去一一翻译过来看一下，我英语不好，就不在这里献丑了，同学们可以按需取舍。</p><img src="/2020/03/30/win10-simple/33.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/34.jpg" class="" title="null"><p>“系统应用”组件下就是系统自带的应用，大家可以根据自己的喜好进行删除，其中“Window Defender”是系统自带的安全软件。不过它喜欢搞事情，比如它会清理掉你下载的盗版游戏啊、盗版软件啊、激活工具啊、破解工具什么的，所以你懂的。。。（呼吁，大家支持正版哈。。。），其他选项同样同学们可以按需取舍。</p><img src="/2020/03/30/win10-simple/35.jpg" class="" title="null"><p>”Windows App“组件下的其他功能，同学们可以根据备注信息的说明，自由按需取舍。</p><img src="/2020/03/30/win10-simple/36.jpg" class="" title="null"><p>“多媒体”组件下，我去除了“其他主题”和“墙纸”，其他选项同样同学们可以按需取舍。</p><img src="/2020/03/30/win10-simple/37.jpg" class="" title="null"><p>“本地化”组件下的“语言”，我这边只保留了“简体中文”，其他选项同样同学们可以按需取舍。</p><img src="/2020/03/30/win10-simple/39.jpg" class="" title="null"><p>“硬件支持”组件下，去除了“游戏周边”，其他选项同样同学们可以按需取舍。</p><img src="/2020/03/30/win10-simple/38.jpg" class="" title="null"><p>“系统”、“网络”、“远程控制与隐私”和“驱动程序”四个组件小白的话不建议操作。</p><p><strong>b.“配置”部分的精简</strong></p><img src="/2020/03/30/win10-simple/40.jpg" class="" title="null"><p>这部分同学们可以根据每一项的备注信息，自由按需取舍，这里就不做赘述啦。</p><img src="/2020/03/30/win10-simple/41.jpg" class="" title="null"><p>其中，”设置“选项下的”预安装应用“记得禁用掉</p><p><strong>c.”整合“部分</strong></p><img src="/2020/03/30/win10-simple/42.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/43.jpg" class="" title="null"><p>以上就是精简系统的步骤。</p><p><strong>三、打包自己的系统</strong></p><p>精简完毕后就可以打包自己的系统了</p><img src="/2020/03/30/win10-simple/44.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/45.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/46.jpg" class="" title="null"><p>点击”应用“，勾选”创建ISO“，会让你选择文件要保存的位置，选好位置点击”保存“，之后会让你给卷标命名</p><img src="/2020/03/30/win10-simple/47.jpg" class="" title="null"><p>卷标命名之后，就可以看到右下角的信息</p><img src="/2020/03/30/win10-simple/48.jpg" class="" title="null"><p>然后，点击工具右上角的”开始“</p><img src="/2020/03/30/win10-simple/49.jpg" class="" title="null"><p>选择”是“</p><img src="/2020/03/30/win10-simple/50.jpg" class="" title="null"><p>工具开始自动打包</p><img src="/2020/03/30/win10-simple/51.jpg" class="" title="null"><img src="/2020/03/30/win10-simple/52.jpg" class="" title="null"><p>每一项完成之后，就可以到你保存的路径内找到打包好的精简包了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打造自己的win10精简系统（超详细）&quot;&gt;&lt;a href=&quot;#打造自己的win10精简系统（超详细）&quot; class=&quot;headerlink&quot; title=&quot;打造自己的win10精简系统（超详细）&quot;&gt;&lt;/a&gt;打造自己的win10精简系统（超详细）&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="Window" scheme="http://yoursite.com/categories/Window/"/>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>flutter-layout</title>
    <link href="http://yoursite.com/2020/03/24/flutter-layout/"/>
    <id>http://yoursite.com/2020/03/24/flutter-layout/</id>
    <published>2020-03-24T03:41:44.000Z</published>
    <updated>2020-05-22T15:43:34.153Z</updated>
    
    <content type="html"><![CDATA[<ul><li>LinerLayout在Flutter中等价于什么（Android）？</li><li>RelativeLayout在Flutter中等价于什么（Android）？</li><li>如何使用widget定义布局属性？</li><li>如何分层布局？</li><li>如何设置布局样式？</li><li>ScrollView在Flutter中等价于什么？</li><li>谁是Flutter的列表组件？</li><li>如何知道点击了列表中的哪个item？</li><li>如何动态更新ListView？</li></ul><h2 id="LinerLayout在Flutter中等价于什么（Android）？"><a href="#LinerLayout在Flutter中等价于什么（Android）？" class="headerlink" title="LinerLayout在Flutter中等价于什么（Android）？"></a>LinerLayout在Flutter中等价于什么（Android）？</h2><p>在Android中，使用LinerLayout来使你的控件呈现水平或者垂直排列。在Flutter中，你可以使用Row或者Column widget来实现相同的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Row(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">      Text('Row one'),</span></span><br><span class="line"><span class="xml">      Text('Row two'),</span></span><br><span class="line"><span class="xml">      Text('Row three'),</span></span><br><span class="line"><span class="xml">      Text('Row four'),</span></span><br><span class="line"><span class="xml">    ]</span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Column(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">      Text('Row one'),</span></span><br><span class="line"><span class="xml">      Text('Row two'),</span></span><br><span class="line"><span class="xml">      Text('Row three'),</span></span><br><span class="line"><span class="xml">      Text('Row four'),</span></span><br><span class="line"><span class="xml">    ]</span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RelativeLayout-在Flutter中等价于什么（Android）"><a href="#RelativeLayout-在Flutter中等价于什么（Android）" class="headerlink" title="RelativeLayout 在Flutter中等价于什么（Android）"></a>RelativeLayout 在Flutter中等价于什么（Android）</h2><p>RelativeLayout用于使widget相对于彼此的位置排列。在Flutter中，有几种方法可以实现相同的结果。</p><p>可以通过使用<code>Column</code>,<code>Row</code>,<code>Stack</code>的组合来实现<code>RelativeLayout</code>的效果。可以为widget构造函数指定相对于父组件的布局规则。</p><h2 id="如何使用widget定义布局属性？"><a href="#如何使用widget定义布局属性？" class="headerlink" title="如何使用widget定义布局属性？"></a>如何使用widget定义布局属性？</h2><p>在RN中，大多数布局都可以使用传递给特定的组件的props来完成。例如，您可以使用View组件上的样式props来指定flexbox属性。要在列中排列组件，您可以指定一个prop，例如：flexDirection: column。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">"column"</span>,</span><br><span class="line">    justifyContent: <span class="string">"space-between"</span>,</span><br><span class="line">    alignItems: <span class="string">"center"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><p>在Flutter中，布局主要由专门设计用于提供布局的小部件定义，并结合控件widget及其样式属性</p><p>例如：列和行widget控制一个数组中的条目并且分别垂直和水平对齐它们，Cotainer widget控制一个布局的样式和属性，并且Center widget负责剧中它的子widget。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">      Container(</span></span><br><span class="line"><span class="xml">        color: Colors.red,</span></span><br><span class="line"><span class="xml">        width: 100,</span></span><br><span class="line"><span class="xml">        height: 100</span></span><br><span class="line"><span class="xml">      ),</span></span><br><span class="line"><span class="xml">      Container(</span></span><br><span class="line"><span class="xml">        color: Colors.blue,</span></span><br><span class="line"><span class="xml">        width: 100,</span></span><br><span class="line"><span class="xml">        height: 100</span></span><br><span class="line"><span class="xml">      ),</span></span><br><span class="line"><span class="xml">      Container(</span></span><br><span class="line"><span class="xml">        color: Colors.green,</span></span><br><span class="line"><span class="xml">        width: 100,</span></span><br><span class="line"><span class="xml">        height: 100</span></span><br><span class="line"><span class="xml">      ),</span></span><br><span class="line"><span class="xml">    ]</span></span><br><span class="line"><span class="xml">  )</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><p>Flutter的核心widget库中提供了各种布局小部件。例如：<code>Padding</code>, <code>Align</code>和<code>Stack</code></p><h2 id="如何分层布局"><a href="#如何分层布局" class="headerlink" title="如何分层布局"></a>如何分层布局</h2><p>在React Native中，组件可以使用absolute定位来分层</p><p>Flutter使用<code>Stack</code> widget控制子widget在一层。子widget可以完全或者部分覆盖基础widget。</p><p><code>Stack</code>控件将其子项相对于其框的边缘定位。如果您只想重叠多个子窗口小部件，这个类很有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  alignment: Alignment(<span class="number">0.6</span>,<span class="number">0.6</span>),</span><br><span class="line">  children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">    CircleAvatar(</span></span><br><span class="line"><span class="xml">      backgroundImage: NetworkImage("https://avatars3.githubusercontent.com/u/14101776?v=4")</span></span><br><span class="line"><span class="xml">    ),</span></span><br><span class="line"><span class="xml">    Container(</span></span><br><span class="line"><span class="xml">      decoration: BoxDecoration(color: Colors.black45),</span></span><br><span class="line"><span class="xml">      child: Text('Flutter')</span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">  ]</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><h2 id="如何设置布局样式"><a href="#如何设置布局样式" class="headerlink" title="如何设置布局样式"></a>如何设置布局样式</h2><p>Flutter没有内联样式和Stylesheet.create的概念，它有一套独特的布局系统，Padding、<code>Center</code>、<code>Column</code>、<code>Row</code>、等都是widget，另外组件也通常接受用于布局样式的构造参数：比如<code>Text</code>widget可以使用<code>TextStyle</code>属性。如果要在多个位置使用相同的文本样式，你可以创建一个<code>TextStyle</code>类并应用于各个<code>Text</code>widget中</p><h2 id="ScrollView在Flutter中等价于什么？"><a href="#ScrollView在Flutter中等价于什么？" class="headerlink" title="ScrollView在Flutter中等价于什么？"></a>ScrollView在Flutter中等价于什么？</h2><p>在Android中，<code>ScrollView</code>允许您包含一个子控件，以便在用户设备的屏幕比控件内容小的情况下，使它们可以滚动。在Flutter中，最简单的方法是使用ListView。但在Flutter中，一个<code>ListView</code>既是一个ScrollView，也是一个Android ListView</p><p>在iOS中，你给view包裹上ScrollView来允许用户在需要时滚动你的内容。在Flutter中，最简单的方法是使用ListView widget。它表现的既和iOS中的ScrollView一致，也能和TableView一致，因为你可以给它的widget做垂直排布。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView(</span><br><span class="line">    children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">      Text('Row One'),</span></span><br><span class="line"><span class="xml">      Text('Row Two'),</span></span><br><span class="line"><span class="xml">      Text('Row Three'),</span></span><br><span class="line"><span class="xml">      Text('Row Four'),</span></span><br><span class="line"><span class="xml">    ]</span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="谁是Flutter的列表组件？"><a href="#谁是Flutter的列表组件？" class="headerlink" title="谁是Flutter的列表组件？"></a>谁是Flutter的列表组件？</h2><ul><li>在iOS中，通常用<code>UITableView</code>或<code>UICollectionView</code>来展示一个列表；</li><li>在Android中，通常用<code>ListView</code>或<code>RecyclerView</code>来展示一个列表；</li><li>在RN中，通常用<code>FlatList</code>或者<code>SectionList</code>来展示一个列表；</li></ul><p>在Flutter中，你可以用ListView来达到相似的目的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Simple());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Simple App'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue</span><br><span class="line">      ),</span><br><span class="line">      home: SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _SampleAppState createState() =&gt; _SampleAppState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Sample App'</span>),),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: _getListData(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; _getListData () &#123;</span><br><span class="line">    List&lt;Widget&gt; widgets = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(Padding(padding: EdgeInsets.all(<span class="number">10</span>), <span class="attr">child</span>: Text(<span class="string">'Row $i'</span>),));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> widgets;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Android ListView中，您可以创建一个适配器，然后您可以将它传递给ListView，该适配器将使用适配器返回的内容来展示每一行，从上面的代码不难看出，在Flutter中没有adapter的等价物，我们唯一要做的就是控制这个list中要展示的数据。</p></blockquote><h2 id="如何知道点击了列表中的哪个item？"><a href="#如何知道点击了列表中的哪个item？" class="headerlink" title="如何知道点击了列表中的哪个item？"></a>如何知道点击了列表中的哪个item？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Simple());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Simple App'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue</span><br><span class="line">      ),</span><br><span class="line">      home: SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _SampleAppState createState() =&gt; _SampleAppState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Sample App'</span>),),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: _getListData(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; _getListData () &#123;</span><br><span class="line">    List&lt;Widget&gt; widgets = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(</span><br><span class="line">        GestureDetector(</span><br><span class="line">         child: Padding(padding: EdgeInsets.all(<span class="number">10</span>), <span class="attr">child</span>: Text(<span class="string">'Row $i'</span>),),</span><br><span class="line">         onTap: () &#123;</span><br><span class="line">           print(<span class="string">'row tapped'</span>);</span><br><span class="line">         &#125;, </span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> widgets;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中我们通过<code>GestureDetector</code>来监听item的点击事件</p><h2 id="如何动态更新ListView？"><a href="#如何动态更新ListView？" class="headerlink" title="如何动态更新ListView？"></a>如何动态更新ListView？</h2><ul><li>在iOS中，你改变列表的数据，并通过reloadData()方法来通知table或是collection view；</li><li>在Android中，改变列表数据后通过notifyDataSetChanged来更新列表；</li></ul><p>在Flutter中，如果你想通过<code>setState()</code>方法来更新widget列表，你会很快发现你的数据展示并没有变化。这是因为当<code>setState()</code>被调用时，Flutter渲染引擎会去检查widget树来查看是否有什么地方被改变了。当它得到你的<code>ListView</code>时，它会使用一个<code>==</code>判断，并且发现俩个<code>ListView</code>时相同的。没有什么东西是变了的，因此更新不是必须的。</p><p><strong>一个更新ListView的简单方法是，在setState()中创建一个新的List，并把旧List的数据拷贝给新的List</strong>。虽然这样很简单，但当数据集很大时，并不推荐这样做，来一起看一个demo：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Simple());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Simple App'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue</span><br><span class="line">      ),</span><br><span class="line">      home: SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _SampleAppState createState() =&gt; _SampleAppState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; widgets = [];</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(getRow(i));</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Sample App'</span>),),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: widgets,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget getRow(int i)&#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      child: Padding(</span><br><span class="line">        child: Text(<span class="string">'Row $i'</span>),</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      ),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          widgets = List.from(widgets);</span><br><span class="line">          widgets.add(getRow(widgets.length + <span class="number">1</span>));</span><br><span class="line">          print(<span class="string">'row $i'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个推荐的，高效的且有效的做法是，使用<code>ListView.Builder</code>来构建列表。这个方法在你想要构建动态列表，或是列表拥有大量数据时会非常好用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Simple());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Simple App'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue</span><br><span class="line">      ),</span><br><span class="line">      home: SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _SampleAppState createState() =&gt; _SampleAppState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Widget&gt; widgets = [];</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(getRow(i));</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Sample App'</span>),),</span><br><span class="line">      body: ListView.builder(</span><br><span class="line">        itemCount: widgets.length,</span><br><span class="line">        itemBuilder: (BuildContext context, int position) &#123;</span><br><span class="line">          <span class="keyword">return</span> getRow(position);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget getRow(int i)&#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      child: Padding(</span><br><span class="line">        child: Text(<span class="string">'Row $i'</span>),</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      ),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          widgets.add(getRow(widgets.length + <span class="number">1</span>));</span><br><span class="line">          print(<span class="string">'row $i'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与创建一个<code>ListView</code>不同，创建一个<code>ListView.builder</code>接收俩个主要的参数：列表的初始长度，和一个itemBuilder方法。</p><p>itemBuilder方法和iOS的<code>cellForItemAt</code>代理方法非常类似，它接受一个位置，并且返回在这个位置上你希望渲染的cell。</p><p>最后，也是最重要的，注意<code>onTap()</code>函数里并没有重新创建一个<code>List</code>，而是<code>add</code>了一个widget。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;LinerLayout在Flutter中等价于什么（Android）？&lt;/li&gt;
&lt;li&gt;RelativeLayout在Flutter中等价于什么（Android）？&lt;/li&gt;
&lt;li&gt;如何使用widget定义布局属性？&lt;/li&gt;
&lt;li&gt;如何分层布局？&lt;/li
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter-widget</title>
    <link href="http://yoursite.com/2020/03/23/flutter-widget/"/>
    <id>http://yoursite.com/2020/03/23/flutter-widget/</id>
    <published>2020-03-23T03:16:49.000Z</published>
    <updated>2020-05-22T15:43:34.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何更新Widgets"><a href="#如何更新Widgets" class="headerlink" title="如何更新Widgets"></a>如何更新Widgets</h2><p>在Android/ios中要更新视图，我们可以通过对应的方法来操作更改。在Flutter中，Widget是不可变的，不会直接更新。相反，我们可以通过操纵Widget的状态来更新它们。</p><p>这就是有状态和无状态的概念来源。StatelessWidget听起来就像是一个没有状态信息的Widget。</p><p>StatelessWidget适用于当我们描述的用户界面不依赖于对象中的配置信息时。</p><p>例如，在Android/ios中，我们需要用ImageView/UIImageView来显示logo。logo在运行时不会改变，因此在Flutter中使用StatelessWidget是最好的</p><p>如果要根据HTTP网络请求或用户交互后收到的数据动态更改ui，则必须使用StatefulWidget，并告诉Flutter框架Widget的状态已更新，以便更新该Widget。</p><p>无状态Widget和有状态Widget之间的重要区别在于StatefulWidget具有一个State对象，该对象存储状态数据并将其传到树重建中，因此状态不会丢失</p><blockquote><p>请记住以下规则：如果Widget在<code>build</code>之外更改（例如，运行时用户交互），则它是有状态的。如果Widget永远不会改变，一旦构建，它就是无状态的。但是，即使Widget是有状态的，如果包含它的父窗口小部件本身不对这些更改（或其他输入）作出反应，父Widget任然可以是无状态的。</p></blockquote><p>接下来，我们来看看如何使用一个StatelessWidget。Text就是一个简单的StatelessWidget。如果你查看Text Widget的实现，救会发现它是一个StatelessWidget的子类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(<span class="string">'I like Flutter!'</span>, <span class="attr">style</span>: TextStyle(fontWeight: FontWeight.bold));</span><br></pre></td></tr></table></figure><p>正如你所看到的，Text没有与之关联的状态信息，它呈现了构造函数中传递的内容，仅此而已。</p><p>但是，如果想让“I like Flutter”动态变化，例如点击一个FloatActionButton。可以通过将Text包装在StatelessWidget中并在点击按钮时更新它来实现，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Sample App'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: SampleAppPage()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  SampleApp(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  SampleAppState createState() =&gt; SampleAppState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleApp</span>&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">String</span> textToShow = <span class="string">'I like flutter'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _updateText() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      textToShow = <span class="string">'Flutter is good'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何布局"><a href="#如何布局" class="headerlink" title="如何布局"></a>如何布局</h2><ul><li>在Android中，我们通过xml编写布局</li><li>在Ios中，我们会用Storyboard文件来组织views，并对它们设置约束，或在view controller中使用代码来约束</li></ul><p>在Flutter中，我们通过编写一个widget树来声明布局</p><p>下面这个例子展示了一个带有padding的简单widget</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    body: Center(</span><br><span class="line">      child: MaterialButton(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        child: Text(<span class="string">'hello world'</span>),</span><br><span class="line">        padding: EdgeInsets.only(left: <span class="number">10</span>,<span class="attr">right</span>: <span class="number">10</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何在布局中添加或者删除组件"><a href="#如何在布局中添加或者删除组件" class="headerlink" title="如何在布局中添加或者删除组件"></a>如何在布局中添加或者删除组件</h2><ul><li>在Android中，我们可以调用父级控件的addChild或removeChild方法以动态添加或删除View</li><li>在ios中，我们可以调用父view的addSubview()或在子view的removeFromSuperview来动态的添加或者删除子view</li></ul><p>在Flutter中，因为Widget是不可变的，所以没有类似的方法。相反，我们可以传入一个函数或者是表达式，该函数或者表达式返回一个Widget给父类，并通过bool值控制该Widget的创建。</p><p>例如，当点击一个FloatingActionButton时，如何在俩个widget之间切换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleApp</span>&gt;</span>&#123;</span><br><span class="line">  bool toggle = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      toggle = !toggle;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getToggleChild() &#123;</span><br><span class="line">    <span class="keyword">if</span> (toggle) &#123;</span><br><span class="line">      <span class="keyword">return</span> Text(<span class="string">'Toggle one'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> MaterialButton(</span><br><span class="line">        child: Text(<span class="string">'Toggle two'</span>),</span><br><span class="line">        onPressed: ()&#123;&#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Sample App'</span>),),</span><br><span class="line">      body: Center(child: _getToggleChild(),),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.update),</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        tooltip: <span class="string">'Uppdate Text'</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Widget实现动画"><a href="#Widget实现动画" class="headerlink" title="Widget实现动画"></a>Widget实现动画</h2><ul><li>在Android中，我们可以通过xml创建动画或者调用view.animate()</li><li>在Ios中，可以通过调用animate(withDuration: animations:)方法来给一个view创建动画</li></ul><p>在Flutter中，使用动画库来包裹widget，而不是创建一个动画widget</p><p>在Flutter中，使用AnimationController，这是一个可以暂停、寻找、停止、反转动画的Animation类型。它需要一个Ticker当vsync发生时来发送信号，并且在每帧运行时创建一个介于0~1之间的线性插值（interpolation）。我们可以创建一个或多个的Animation并附加一个Controller。</p><p>例如，我们可能会用CurvedAnimation来实现一个interpolated曲线。在这个场景中，controller是动画过程的“主人”，而CurvedAnimation计算曲线，并替代controller默认的线性模式</p><p>当构建widget树时，你会把Animation指定给一个widget的动画属性，比如FadeTransition的opacity，并告诉控制器的开始动画</p><p>下面举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Fade Demo'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with "flutter run". You'll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// "hot reload" (press "r" in the console where you ran "flutter run",</span></span><br><span class="line">        <span class="comment">// or simply save your changes to "hot reload" in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn't reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyFadeTest(title: <span class="string">'Fade demo'</span>),);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFadeTest</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> title;</span><br><span class="line"></span><br><span class="line">  MyFadeTest(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  @override</span><br><span class="line">  MyFadeTestState createState() =&gt; MyFadeTestState();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFadeTestState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyFadeTest</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  AnimationController controller;</span><br><span class="line"></span><br><span class="line">  CurvedAnimation curve;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    controller = AnimationController(duration: Duration(milliseconds: <span class="number">2000</span>), <span class="attr">vsync</span>: <span class="keyword">this</span>);</span><br><span class="line">    curve = CurvedAnimation(parent: controller, <span class="attr">curve</span>: Curves.easeIn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(widget.title),),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          child: FadeTransition(</span><br><span class="line">            opacity: curve,</span><br><span class="line">            child: FlutterLogo(size: <span class="number">100</span>,),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        tooltip: <span class="string">'Fade'</span>,</span><br><span class="line">        child: Icon(Icons.brush),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          controller.forward();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何绘图（Canvas-draw-paint）"><a href="#如何绘图（Canvas-draw-paint）" class="headerlink" title="如何绘图（Canvas draw/paint）"></a>如何绘图（Canvas draw/paint）</h2><ul><li>在Android中，可以使用Canvas与Drawable在屏幕上绘制出自定义形状和图片</li><li>在Ios上，可以通过CoreGraphics来在屏幕上绘制线条和形状</li><li>在RN中我们通常是由react-native-canvas插件来进行绘图</li></ul><p>Flutter也有类似的Canvas API，因为它基于相同的底层渲染引擎Skia。因此，对于Android开发人员来说，在Flutter中绘制到画布是一件非常熟悉的任务。Flutter有俩个类可以帮助我们绘制画布，CustomPaint和CustomPainter，它们实现算法以绘制到画布。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MaterialApp(home: DemoApp(),));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) =&gt;Scaffold(body: Signature(),);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signature</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  SignatureState createState() =&gt; SignatureState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Signature</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Offset&gt; _points = <span class="xml"><span class="tag">&lt;<span class="name">Offset</span>&gt;</span>[];</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  @override</span></span><br><span class="line"><span class="xml">  Widget build(BuildContext context) &#123;</span></span><br><span class="line"><span class="xml">    // TODO: implement build</span></span><br><span class="line"><span class="xml">    return GestureDetector(</span></span><br><span class="line"><span class="xml">      onPanUpdate: (DragUpdateDetails details) &#123;</span></span><br><span class="line"><span class="xml">        setState(() &#123;</span></span><br><span class="line"><span class="xml">          RenderBox referenceBox = context.findRenderObject();</span></span><br><span class="line"><span class="xml">          Offset localPosition = referenceBox.globalToLocal(details.globalPosition);</span></span><br><span class="line"><span class="xml">          _points = List.from(_points)..add(localPosition);</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      onPanEnd: (DragEndDetails details) =&gt; _points.add(null),</span></span><br><span class="line"><span class="xml">      child: CustomPaint(painter: SignaturePainter(_points), size: Size.infinite,),</span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">class SignaturePainter extends CustomPainter&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  SignaturePainter(this.points);</span></span><br><span class="line"></span><br><span class="line">  List&lt;Offset&gt; points;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    // TODO: implement paint</span><br><span class="line">    var paint = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..strokeCap = StrokeCap.round</span><br><span class="line">    ..strokeWidth = 5.0;</span><br><span class="line">    for (int i = 0; i &lt; points.length - 1; i++) &#123;</span><br><span class="line">      if (points[i] != null &amp;&amp; points[i + 1] != null)</span><br><span class="line">        canvas.drawLine(points[i], points[i + 1], paint);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(SignaturePainter other) =&gt; other.points != points;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制圆形和方形"><a href="#绘制圆形和方形" class="headerlink" title="绘制圆形和方形"></a>绘制圆形和方形</h2><p>在Flutter中，你可以使用<code>CustomPaint</code>和<code>CustomPainter</code>类去绘制到画布上</p><p>以下示例显示如何使用<code>CustomPaint</code>widget在绘制阶段绘制。它实现了抽象类CustomPainter，并将其传递给CustomPaint的painter属性。CustomPaint字类必须实现paint和shouldRepaint方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter bottomNavigationBar'</span>,</span><br><span class="line">      theme: ThemeData.fallback(),</span><br><span class="line">      home: _MyCanvas(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyCanvas</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: CustomPaint(</span><br><span class="line">        painter: MyCanvasPainter(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCanvasPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span></span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement paint</span></span><br><span class="line">    Paint paint = Paint();</span><br><span class="line">    paint.color = Colors.amber;</span><br><span class="line">    canvas.drawCircle(Offset(<span class="number">100</span>, <span class="number">200</span>), <span class="number">40</span>, paint);</span><br><span class="line">    Paint paintRect = Paint();</span><br><span class="line">    paintRect.color = Colors.lightBlue;</span><br><span class="line">    Rect rect = Rect.fromPoints(Offset(<span class="number">150</span>, <span class="number">300</span>), Offset(<span class="number">300</span>, <span class="number">400</span>));</span><br><span class="line">    canvas.drawRect(rect, paintRect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(MyCanvasPainter oldDelegate) =&gt; <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRebuildSemantics(MyCanvasPainter oldDelegate) =&gt; <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何构建自定义Widget"><a href="#如何构建自定义Widget" class="headerlink" title="如何构建自定义Widget"></a>如何构建自定义Widget</h2><ul><li>在Andorid中，可以通过继承View或已存在的某个控件，然后覆盖其绘制方法来实现自定义View</li><li>在iOS中，可以通过编写UIView的子类，或使用已存在的view来重载并实现该方法。以达到特定的功能</li></ul><p>在Flutter中，推荐组合多个小的widget来构建一个自定义的widget（而不是扩展它）</p><p>举个例子，如果你要构建一个CustomButton，并在构造器中传入它的label。那就组合RaisedButton和label，而不是扩展RaisedButton</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  CustomButton(<span class="keyword">this</span>.label);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> label;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> RaisedButton(</span><br><span class="line">      onPressed: ()&#123;&#125;,</span><br><span class="line">      child: Text(label),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> CustomButton(<span class="string">'这是一个自定义的按钮'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何设置widget的透明度"><a href="#如何设置widget的透明度" class="headerlink" title="如何设置widget的透明度"></a>如何设置widget的透明度</h2><ul><li>在iOS中，什么东西都会有一个.opacity或是.alpha的属性</li><li>在Android中View有setAlpha的方法</li></ul><p>在Flutter中如果要改变透明度，我们可以给widget包裹一个Opacity widget来做到这一点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Opacity&#123;</span><br><span class="line">  opacity: <span class="number">0.5</span>,</span><br><span class="line">  child: Text(<span class="string">'透明度50%'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何更新Widgets&quot;&gt;&lt;a href=&quot;#如何更新Widgets&quot; class=&quot;headerlink&quot; title=&quot;如何更新Widgets&quot;&gt;&lt;/a&gt;如何更新Widgets&lt;/h2&gt;&lt;p&gt;在Android/ios中要更新视图，我们可以通过对应的方法来操作更
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter-project</title>
    <link href="http://yoursite.com/2020/03/20/flutter-project/"/>
    <id>http://yoursite.com/2020/03/20/flutter-project/</id>
    <published>2020-03-20T08:52:06.000Z</published>
    <updated>2020-05-22T15:43:34.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>一个通常的flutter项目结构是这样的：</p><ul><li>projectname<ul><li>android           - Android部分的工程文件</li><li>build             - 项目的构建输出目录</li><li>ios               - ios部分的工程目录</li><li>lib               - 项目中的Dart源文件<ul><li>src             - 包含其他源文件</li><li>main.dart       - 自动生成的项目入口文件，类似于RN中的index.js</li></ul></li><li>test              - 测试相关的文件</li><li>pubspec.yaml      - 项目依赖配置文件 类似于RN中的package.json</li></ul></li></ul><blockquote><p>大家也可以根据需要进行调整 </p></blockquote><h2 id="在哪里归档图片资源以及如何处理不同分辨率"><a href="#在哪里归档图片资源以及如何处理不同分辨率" class="headerlink" title="在哪里归档图片资源以及如何处理不同分辨率"></a>在哪里归档图片资源以及如何处理不同分辨率</h2><ul><li>虽然Android将resources和assets区别对待，但在Flutter中，他们都会被作为assets处理，所有存在Android上<code>res / drawable- *</code>文件夹中的资源都放在Flutter的assets中。</li><li>与Android类似，ios同样将images和assets作为不同的东西，而Flutter中只有assets。被放在ios中<code>images.xcasset</code>文件夹下的资源在Flutter中被放在assets文件夹中。</li></ul><p>在Flutter中<code>assets</code>可以是任意类型的文件，而不仅仅是图片。例如，你可以把json文件放置到<code>my-assets</code>文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my-assets/data.json</span><br></pre></td></tr></table></figure><p>记得在<code>pubspec.yaml</code>文件中声明<code>assets</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line"> - my-assets/data.json</span><br></pre></td></tr></table></figure><p>然后我们在代码中可以通过<code>AssetBundle</code>来访问它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span> show Feture;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span> show rootBundle;</span><br><span class="line"></span><br><span class="line">Futurn&lt;<span class="built_in">String</span>&gt; loadAsset() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> rootBundle.loadString(<span class="string">'my-assets/data.json'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于图片，Flutter像Ios一样，遵循了一个简单的基于像素密度的格式。Image assets可能是1.0x 2.0x 3.0x 或是其他的任何倍数。这个devicePixelRatio表示了物理像素到单个逻辑像素的比率。</p><p>Android不同像素密度的图片和Flutter的像素比率的对应关系</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ldpi      <span class="number">0.75</span>x</span><br><span class="line">mdpi      <span class="number">1.0</span>x</span><br><span class="line">hdpi      <span class="number">1.5</span>x</span><br><span class="line">xhdpi     <span class="number">2.0</span>x</span><br><span class="line">xxhdpi    <span class="number">3.0</span>x</span><br><span class="line">xxxhdpi   <span class="number">4.0</span>x</span><br></pre></td></tr></table></figure><p>Assets可以被放置在任何属性文件夹中–Flutter并没有预先定义的文件结构。我们需要在<code>pubspec.yaml</code>文件中声明assets的位置，然后flutter会把它们识别出来。</p><p>举个例子，要把一个名为<code>my_icon.png</code>的图片放到flutter工程中，你可能想要把它放到images文件夹中。把图片（1.0x）放置到images文件夹中，并把其他分辨率的图片放在对应的子文件夹中，并接上合适的比例系数，就像这样：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">images<span class="regexp">/my_icon.png          /</span>/ <span class="string">base:</span> <span class="number">1.0</span>x image</span><br><span class="line">images<span class="regexp">/2.0x/</span>my_icon.png     <span class="comment">// 2.0x image</span></span><br><span class="line">images<span class="regexp">/3.0x/</span>my_icon.png     <span class="comment">// 3.0x image</span></span><br></pre></td></tr></table></figure><p>接下来就可以在<code>pubspec.yaml</code>文件中这样声明这个图片资源：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets</span><br><span class="line"><span class="bullet"> - </span>images/my_icon.png</span><br></pre></td></tr></table></figure><p>现在我们可以借助AssetImage来访问它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> AssetImage(<span class="string">'images/my_icon.png'</span>);</span><br></pre></td></tr></table></figure><p>也可以通过<code>Image</code>widget直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Image.asset(<span class="string">'images/my_icon.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何归档strings资源，以及处理不同的语言"><a href="#如何归档strings资源，以及处理不同的语言" class="headerlink" title="如何归档strings资源，以及处理不同的语言"></a>如何归档strings资源，以及处理不同的语言</h2><p>不像IOS拥有一个<code>Localizable.strings</code>文件，Flutter目前没有专门的字符串资源系统。目前，最佳做法是将strings资源作为静态字段保存在类中。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> welcomeMessage = <span class="string">'welcome to flutter'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然年像以下方式来访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(Strings.welcomeMessage)</span><br></pre></td></tr></table></figure><p>默认情况下，Flutter只支持美式英语字符串。如果你要支持其他语言，请引入<code>flutter_localizations</code>包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;p&gt;一个通常的flutter项目结构是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;projectname&lt;ul&gt;
&lt;li&gt;android
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter Get Start</title>
    <link href="http://yoursite.com/2020/03/20/flutter/"/>
    <id>http://yoursite.com/2020/03/20/flutter/</id>
    <published>2020-03-20T06:18:17.000Z</published>
    <updated>2020-03-20T14:48:39.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h2><p>官方文档：<a href="https://flutter.dev/docs" target="_blank" rel="noopener">https://flutter.dev/docs</a></p><p>中文版：<a href="https://flutterchina.club/" target="_blank" rel="noopener">https://flutterchina.club/</a></p><p>flutter pub: <a href="https://pub.dev/" target="_blank" rel="noopener">https://pub.dev/</a></p><h2 id="Fultter创建项目"><a href="#Fultter创建项目" class="headerlink" title="Fultter创建项目"></a>Fultter创建项目</h2><p>要创建一个flutter项目有俩种方式：</p><ul><li><p>从命令行使用<code>flutter create</code>命令，确保Flutter SDK配置了环境变量</p></li><li><p>使用安装了Flutter和Dart的插件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create &lt;projectname&gt;</span><br></pre></td></tr></table></figure><h2 id="运行Flutter项目"><a href="#运行Flutter项目" class="headerlink" title="运行Flutter项目"></a>运行Flutter项目</h2><p>俩种方式运行项目：</p><ul><li><p>项目的根目录使用<code>flutter run</code></p></li><li><p>在带有Flutter和Dart插件的IDE使用“run”选项</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter run -d <span class="string">'iPhone X'</span></span><br></pre></td></tr></table></figure><blockquote><p><code>-d</code>后面跟的是具体的设备名称，可以Android或ios模拟器的名字，也可以是一台已经连接到电脑上的Android或IOS的设备</p></blockquote><h2 id="导入Widget"><a href="#导入Widget" class="headerlink" title="导入Widget"></a>导入Widget</h2><p>在Flutter中，要使用<code>Material Design</code>库中的小部件，则需要导入<code>material.dart</code>包。要使用IOS样式的widget，请导入<code>Cupertino</code>库，要使用更基本的窗口widget集，请导入widget库，当然，也可以导入自己编写的widget：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/widgets.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/my_widgets.dart'</span>;</span><br></pre></td></tr></table></figure><p>无论你导入哪个包，Dart都只会导入在您的应用中使用的widget。</p><blockquote><p>想知道Flutter都有哪些widget可以学习<a href="https://flutter.dev/docs/development/ui/widgets-intro" target="_blank" rel="noopener">《认识Flutter Widget》</a></p></blockquote><h2 id="编写Hello-world！"><a href="#编写Hello-world！" class="headerlink" title="编写Hello world！"></a>编写Hello world！</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/masterial.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    Center(</span><br><span class="line">      child: Text(<span class="string">'hello world'</span>, <span class="attr">textDirection</span>: TextDirection.ltr),</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用Widget并将其qian’tao以形成Widget树"><a href="#如何使用Widget并将其qian’tao以形成Widget树" class="headerlink" title="如何使用Widget并将其qian’tao以形成Widget树"></a>如何使用Widget并将其qian’tao以形成Widget树</h2><p>在flutter中，几乎所有的东西都是widget</p><p>widget是用户界面的基本购置模块，您将widget组成一个层次机构，调用widget树。每个窗口的widget都嵌套在父窗口的widget中，并从其父窗口继承属性。甚至应用程序对象本身也是一个组件，没有单独的应用程序对象。相反，根widget担任此角色。</p><p>widget可以定义：</p><ul><li>结构元素 - 如按钮或菜单</li><li>文体元素 - 像字体或者颜色主题</li><li>类似布局的填充或对齐的一个方向</li></ul><p>以下示例使用<code>Material</code>库中的widget显示“hello world”应用程序。在此示例中，widget树嵌套在MaterialApp的根widget中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/masterial.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main () =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'welcome to flutter'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'welcome to flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'hello world'</span>),</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Widget"><a href="#自定义Widget" class="headerlink" title="自定义Widget"></a>自定义Widget</h2><p>在Flutter中，同样需要定义一个类来创建自定义widget，然后重用widget。您还可以定义和调用返回可重用小部件的函数，如以下示例中的构建函数所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CustomWidget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCard</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Function onPress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  CustomCard(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.index, <span class="meta">@required</span> <span class="keyword">this</span>.onPress&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Card(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(<span class="string">'card $index'</span>),</span><br><span class="line">          FlatButton(</span><br><span class="line">            child: Text(<span class="string">'press'</span>),</span><br><span class="line">            onPressed: <span class="keyword">this</span>.onPress,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> index = <span class="string">'111'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'welcome to flutter'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        margin: EdgeInsets.only(top: <span class="number">12</span>, left: <span class="number">13</span>, right: <span class="number">10</span>),</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        child: Row(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(<span class="string">'111'</span>),</span><br><span class="line">            CustomCard(</span><br><span class="line">              index: <span class="keyword">this</span>.index, </span><br><span class="line">              onPress: <span class="keyword">this</span>.onPress,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onPress () &#123;</span><br><span class="line">    print(<span class="string">'1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面的例子中，<code>CustomCard</code>类的构造函数使用Dart的大括号语法<code>{}</code>来配置</p><p>如果要标识必须的字段，请从构造函数中删除花括号，或者将<code>@required</code>添加到构造函数中去</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习文档&quot;&gt;&lt;a href=&quot;#学习文档&quot; class=&quot;headerlink&quot; title=&quot;学习文档&quot;&gt;&lt;/a&gt;学习文档&lt;/h2&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://flutter.dev/docs&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>dart</title>
    <link href="http://yoursite.com/2020/03/20/dart/"/>
    <id>http://yoursite.com/2020/03/20/dart/</id>
    <published>2020-03-20T02:23:17.000Z</published>
    <updated>2020-03-20T14:48:39.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dart入门"><a href="#Dart入门" class="headerlink" title="Dart入门"></a>Dart入门</h2><p>官网： <a href="https://dart.dev/guides/language/sound-dart" target="_blank" rel="noopener">https://dart.dev/guides/language/sound-dart</a></p><p>tutorialspoint: <a href="https://www.tutorialspoint.com/dart_programming/dart_programming_operators.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/dart_programming/dart_programming_operators.htm</a></p><h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><p>Dart中，每个app都必须要有一个顶级的<span style="background: #eee;    border-radius: 3px;    color: red;    padding: 2px 4px;    overflow-wrap: break-word;    word-wrap: break-word;">main()</span>函数作为应用程序的入口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练一练 <a href="https://dartpad.dev/" target="_blank" rel="noopener">DartPad</a></p><blockquote><p><a href="https://dartpad.dev/" target="_blank" rel="noopener">DartPad</a>是Dart的线上的playground,提供Dart线上的playground还有：<a href="https://www.tutorialspoint.com/execute_dart_online.php" target="_blank" rel="noopener">Online Dart Compiler</a></p></blockquote><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><p>要在dart中打印到控制台，可使用print：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure><p>练一练 <a href="https://dartpad.dev/" target="_blank" rel="noopener">DartPad</a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Dart是类型安全的 - 它使用静态类型检查和运行时的组合，检查以确保变量的值始终与变量的静态值匹配类型，尽管类型是必须的，但某些类型注释是可选的，因为Dart会执行类型推断。</p><h3 id="创建和分配变量"><a href="#创建和分配变量" class="headerlink" title="创建和分配变量"></a>创建和分配变量</h3><p>在JavaScript中，无法定义变量的类型。</p><p>在Dart中，变脸必须是明确的类型或系统能够解析的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"JavaScript"</span>;</span><br><span class="line"><span class="comment">// Dart 以下俩种方式都可以</span></span><br><span class="line">String name = <span class="string">'dart'</span>;</span><br><span class="line"><span class="keyword">var</span> otherName = <span class="string">'Dart'</span>;</span><br></pre></td></tr></table></figure><p>更多信息可以查阅官网 <a href="https://dart.dev/guides/language/sound-dart" target="_blank" rel="noopener">Dart官网</a></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在Javascript中，未初始化的变量是<code>undefined</code></p><p>在Dart中，未初始化的变量的初始值为<code>null</code></p><blockquote><p>注意：数字在Dart中也被当做是对象，所以只要是带有数字类型的未初始化变量的值都是<code>null</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// == undefined</span></span><br><span class="line"><span class="comment">// Dart</span></span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// == null</span></span><br><span class="line"><span class="keyword">int</span> x; <span class="comment">// == null</span></span><br></pre></td></tr></table></figure><h3 id="检查Null或者0"><a href="#检查Null或者0" class="headerlink" title="检查Null或者0"></a>检查Null或者0</h3><p>在JavaScript中，null、undefined、0、false、’’都是false，其余都为true</p><blockquote><p>注意： 空数组（[]）,和空对象（{}）也是为true</p></blockquote><p>在Dart中，只有布尔值<code>&quot;true&quot;</code>被视为<code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNull;</span><br><span class="line"><span class="keyword">if</span> (myNull == <span class="literal">null</span>) &#123;</span><br><span class="line">  print(<span class="string">'use " == null" to check null'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (zero == <span class="number">0</span>) &#123;</span><br><span class="line">  print(<span class="string">'use " == 0" to check zero'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="null的最佳检查"><a href="#null的最佳检查" class="headerlink" title="null的最佳检查"></a>null的最佳检查</h3><p>从Dart 1.12开始， <code>null-aware</code>运算符可以帮助我们做null检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bool <span class="title">isConnected</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  bool outConn = outgoing[a]?.contains(b) ?? <span class="keyword">false</span>;</span><br><span class="line">  bool outConn = outgoing[a]?.contains(b) ?? <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> outConn || inConn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>?.</code>运算符在左边为null的情况下会阻断右边的调用， <code>??</code>运算符主要作用是在左侧表达式为null时为其设置默认值。</p><p>对于表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outgoing[a]?.contains(b)</span><br></pre></td></tr></table></figure><p>如果outgoing为null或outgoing[a]为null或者contains(b)的值为null，都会使表达式为null。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="function">function <span class="title">fn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dart</span></span><br><span class="line">fn() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以写作</span></span><br><span class="line"><span class="function">bool <span class="title">fn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><h3 id="Futures"><a href="#Futures" class="headerlink" title="Futures"></a>Futures</h3><p>与JavaScript一样，Dart支持单线程执行。在JavaScript中。<code>Promise</code>对象表示异步操作的最终完成（或失败）及其结果值，Dart使用<code>Future</code>来表示一部操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line">_getIPAddress = () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">"https://httpbin.org/ip"</span>;</span><br><span class="line">  <span class="keyword">return</span> fetch(url)</span><br><span class="line">          .then(response =&gt; response.json())</span><br><span class="line">          .then(responseJson =&gt; &#123;</span><br><span class="line">            console.log(responseJson.origin);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="keyword">catch</span>(e =&gt; &#123;</span><br><span class="line">            console.error(e)</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dart</span></span><br><span class="line">_getIPAddress () &#123;</span><br><span class="line">  <span class="keyword">final</span> url = <span class="string">'https://httpbin.org/ip'</span>;</span><br><span class="line">  HttpRequest.request(url).then((value) &#123;</span><br><span class="line">    print(json.decode(value.responseText)[<span class="string">'origin'</span>]);</span><br><span class="line">  &#125;).carchError((error) =&gt; print(error));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Async与Await"><a href="#Async与Await" class="headerlink" title="Async与Await"></a>Async与Await</h3><p><code>async</code>函数声明定义了一个异步函数</p><p>在Dart中，<code>async</code>函数返回一个<code>Future</code>，函数的主体是稍后执行。<code>await</code>运算符用于等待<code>Future</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_getIPAddress () &#123;</span><br><span class="line">  final url = <span class="string">'https://httpbin.org/ip'</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">await</span> HttpRequest.request(url);</span><br><span class="line">    <span class="built_in">String</span> ip = json.decode(request.responseText)[<span class="string">'origin'</span>];</span><br><span class="line">    print(ip);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    print(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dart入门&quot;&gt;&lt;a href=&quot;#Dart入门&quot; class=&quot;headerlink&quot; title=&quot;Dart入门&quot;&gt;&lt;/a&gt;Dart入门&lt;/h2&gt;&lt;p&gt;官网： &lt;a href=&quot;https://dart.dev/guides/language/sound-da
      
    
    </summary>
    
    
      <category term="Dart" scheme="http://yoursite.com/categories/Dart/"/>
    
    
      <category term="dart" scheme="http://yoursite.com/tags/dart/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter引入百度AI智能语音(Android)</title>
    <link href="http://yoursite.com/2020/03/19/flutter-android-asr/"/>
    <id>http://yoursite.com/2020/03/19/flutter-android-asr/</id>
    <published>2020-03-19T02:17:25.000Z</published>
    <updated>2020-03-20T14:48:39.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>百度语音AI文档：<a href="https://ai.baidu.com/ai-doc/SPEECH/Ck38lxglg" target="_blank" rel="noopener">https://ai.baidu.com/ai-doc/SPEECH/Ck38lxglg</a></p><p>SDK: <a href="https://ai.baidu.com/sdk#asr" target="_blank" rel="noopener">https://ai.baidu.com/sdk#asr</a></p><h2 id="添加asr-plugin"><a href="#添加asr-plugin" class="headerlink" title="添加asr_plugin"></a>添加asr_plugin</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">file</span> -&gt;</span> <span class="function"><span class="title">new</span>  -&gt;</span> N<span class="function"><span class="title">ew</span> Module... -&gt;</span> Android Library</span><br></pre></td></tr></table></figure><img src="/2020/03/19/flutter-android-asr/2.png" class="" title="Android Library"><img src="/2020/03/19/flutter-android-asr/3.png" class="" title="asr_plugin"><h3 id="下载Sdk"><a href="#下载Sdk" class="headerlink" title="下载Sdk #"></a>下载Sdk <strong><sup><a href="https://ai.baidu.com/sdk#asr" target="_blank" rel="noopener">#</a></strong></h3><img src="/2020/03/19/flutter-android-asr/4.png" class="" title="Sdk下载"><p>解压SDK,</p><p>找到<code>core -&gt; libs -&gt; bdasr-**.jar</code>文件夹,复制到<code>asr_plugin/libs</code>下</p><p>找到<code>core -&gt; src -&gt; main -&gt; jniLibs</code>文件夹,复制到<code>asr_plugin/src/main</code>下</p><p>删除<code>jniLibs</code>下的<code>armeabi</code>与<code>armeabi-v7a</code>文件夹</p><p>打开<code>arm64-v8a</code>,<code>x86</code>,<code>x86_64</code></p><p>保留<code>libBaiduSpeechSDK.so</code>和<code>libvad.dnn.so</code>文件，其他全部删除</p><img src="/2020/03/19/flutter-android-asr/5.png" class="" title="asr_plugin"><h3 id="添加keep"><a href="#添加keep" class="headerlink" title="添加keep"></a>添加keep</h3><p><code>asr_plugin/proguard-rules.pro</code>文件下，添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">baidu</span>.<span class="title">speech</span>.**</span>&#123;*;&#125;</span><br></pre></td></tr></table></figure><h3 id="修改AndroidManifest-xml"><a href="#修改AndroidManifest-xml" class="headerlink" title="修改AndroidManifest.xml"></a>修改AndroidManifest.xml</h3><p>打开<code>asr_plugin/manifests/AndroidManifest.xml</code>，添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.RECORD_AUDIO"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span><br><span class="line">&lt;application&gt;</span><br><span class="line">  &lt;meta-data android:name=<span class="string">"com.baidu.speech.APP_ID"</span></span><br><span class="line">      android:value=<span class="string">"9788136"</span> /&gt;</span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">"com.baidu.speech.API_KEY"</span></span><br><span class="line">      android:value=<span class="string">"0GjQNO5H4pGPf9HyA3AmZEbz"</span> /&gt;</span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">"com.baidu.speech.SECRET_KEY"</span></span><br><span class="line">      android:value=<span class="string">"db981ef3ec647ba8a09b599ad7447a24"</span> /&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p>APP_ID,API_KEY,SECRET_KEY需要自己创建</p><img src="/2020/03/19/flutter-android-asr/6.png" class="" title="AndroidManifest"><h2 id="修改app-build-gradle"><a href="#修改app-build-gradle" class="headerlink" title="修改app/build.gradle"></a>修改app/build.gradle</h2><p>在<code>dependencies</code>下，加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">implementation <span class="title">project</span><span class="params">(<span class="string">':asr_plugin'</span>)</span></span></span><br></pre></td></tr></table></figure><img src="/2020/03/19/flutter-android-asr/7.png" class="" title="app&#x2F;build.gradle"><p>运行app/build.gradle</p><blockquote><p>注意： 比较<code>app/build.gradle</code>与<code>asr_plugin/build.gradle</code>的<code>compileSdkVersion</code>版本，版本不对会报错</p></blockquote><p>如果发生以下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error Message: Manifest merger failed : Attribute application<span class="meta">@appComponentFactory</span> value=(android.support.v4.app.CoreComponentFactory) from [com.android.support:support-compat:<span class="number">28.0</span><span class="number">.0</span>]</span><br><span class="line">AndroidManifest.xml:<span class="number">22</span>:<span class="number">18</span>-<span class="number">91</span> is also present at [androidx.core:core:<span class="number">1.0</span><span class="number">.0</span>]</span><br><span class="line">AndroidManifest.xml:<span class="number">22</span>:<span class="number">18</span>-<span class="number">86</span> value=(androidx.core.app.CoreComponentFactory).</span><br></pre></td></tr></table></figure><p>在项目根目录下找到<code>gradle.properties</code>文件，添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.useAndroidX=<span class="keyword">true</span></span><br><span class="line">android.enableJetifier=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>Stackoverflow: <a href="https://stackoverflow.com/questions/51793345/android-material-and-appcompat-manifest-merger-failed/54160351" target="_blank" rel="noopener">https://stackoverflow.com/questions/51793345/android-material-and-appcompat-manifest-merger-failed/54160351</a></p></blockquote><p>运行成功代表引入成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h2&gt;&lt;p&gt;百度语音AI文档：&lt;a href=&quot;https://ai.baidu.com/ai-doc/SPEECH/Ck38lxglg&quot; target
      
    
    </summary>
    
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>微信支付(Vue)</title>
    <link href="http://yoursite.com/2020/03/18/vue-wepay/"/>
    <id>http://yoursite.com/2020/03/18/vue-wepay/</id>
    <published>2020-03-18T03:53:20.000Z</published>
    <updated>2020-03-18T15:09:04.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>公众号官网链接： <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html</a></p><p>微信支付官网链接： <a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-网页授权"><a href="#1-网页授权" class="headerlink" title="1.网页授权"></a>1.网页授权</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 参考链接(请在微信客户端中打开此链接体验):</span><br><span class="line"></span><br><span class="line">// scope为snsapi_base</span><br><span class="line"></span><br><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect</span><br><span class="line"></span><br><span class="line">// scope为snsapi_userinfo</span><br><span class="line"></span><br><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&amp;redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</span><br></pre></td></tr></table></figure><blockquote><p>尤其注意：跳转回调redirect_uri，应当使用https链接来确保授权code的安全性。不可以使用<code>localhost</code>, <code>127.0.0.1</code>, <code>0.0.0.0</code></p></blockquote><p>用户同意授权后</p><p>如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE。</p><blockquote><p>code说明 ： code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。</p></blockquote><p>例： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.getAuthorize()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 获取location.href上的code</span></span><br><span class="line">  getCode() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = getArgs()</span><br><span class="line">    <span class="built_in">console</span>.log(code)</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">      <span class="keyword">this</span>.code = code</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getAuthorize () &#123;</span><br><span class="line">    <span class="comment">// 判断PC环境</span></span><br><span class="line">    <span class="keyword">if</span> (isPC()) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 判断是否微信环境</span></span><br><span class="line">    <span class="keyword">if</span> (!isWeixin()) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 判断是否已经获取code</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.getCode()) &#123;</span><br><span class="line">      <span class="comment">// 链接必须urlEncode</span></span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=<span class="subst">$&#123;APP_ID&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(REDIRECT_URI)&#125;</span>&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 触发微信支付按钮</span></span><br><span class="line">  wxScope() &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPC()) <span class="keyword">return</span> <span class="keyword">this</span>.Toast(<span class="string">'PC端暂不支持微信支付'</span>)</span><br><span class="line">    <span class="keyword">if</span> (isWeixin()) &#123;</span><br><span class="line">      <span class="comment">// 使用JsApi支付</span></span><br><span class="line">      <span class="keyword">this</span>.payByJsApi()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 使用H5支付</span></span><br><span class="line">      <span class="keyword">this</span>.payByH5()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用code获取签名等参数"><a href="#2-使用code获取签名等参数" class="headerlink" title="2.使用code获取签名等参数"></a>2.使用code获取签名等参数</h3><p>微信支付有俩种方式：</p><p><strong>一. WeixinJSBridge</strong></p><p>采用在微信环境调用<code>WeixinJSBridge</code>变量的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   WeixinJSBridge.invoke(</span><br><span class="line">      <span class="string">'getBrandWCPayRequest'</span>, &#123;</span><br><span class="line">         <span class="string">"appId"</span>:<span class="string">"wx2421b1c4370ec43b"</span>,     <span class="comment">//公众号名称，由商户传入     </span></span><br><span class="line">         <span class="string">"timeStamp"</span>:<span class="string">"1395712654"</span>,         <span class="comment">//时间戳，自1970年以来的秒数     </span></span><br><span class="line">         <span class="string">"nonceStr"</span>:<span class="string">"e61463f8efa94090b1f366cccfbbb444"</span>, <span class="comment">//随机串     </span></span><br><span class="line">         <span class="string">"package"</span>:<span class="string">"prepay_id=u802345jgfjsdfgsdg888"</span>,     </span><br><span class="line">         <span class="string">"signType"</span>:<span class="string">"MD5"</span>,         <span class="comment">//微信签名方式：     </span></span><br><span class="line">         <span class="string">"paySign"</span>:<span class="string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span> <span class="comment">//微信签名 </span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> )&#123;</span><br><span class="line">      <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span></span><br><span class="line">            <span class="comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span></span><br><span class="line">      &#125; </span><br><span class="line">   &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</span><br><span class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</span><br><span class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady); </span><br><span class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   onBridgeReady();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这种方法有时会产生<code>WeixinJSBridge is not defined</code>的错误，因为在其他非微信环境是找不到<code>WeixinJSBridge</code>这个变量的</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">payByBridge() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, <span class="keyword">this</span>.onBridgeReady, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</span><br><span class="line">        <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, <span class="keyword">this</span>.onBridgeReady);</span><br><span class="line">        <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, <span class="keyword">this</span>.onBridgeReady);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.onBridgeReady();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">onBridgeReady()&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; appId, timeStamp, nonceStr, signType, paySign &#125; = <span class="keyword">this</span>.wxConfig</span><br><span class="line">  WeixinJSBridge.invoke(</span><br><span class="line">      <span class="string">'getBrandWCPayRequest'</span>, &#123;</span><br><span class="line">        appId,     <span class="comment">//公众号名称，由商户传入</span></span><br><span class="line">        timeStamp,         <span class="comment">//时间戳，自1970年以来的秒数</span></span><br><span class="line">        nonceStr, <span class="comment">//随机串</span></span><br><span class="line">        package: <span class="keyword">this</span>.wxConfig.package,</span><br><span class="line">        signType,         <span class="comment">//微信签名方式：</span></span><br><span class="line">        paySign <span class="comment">//微信签名</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> )&#123;</span><br><span class="line">        <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span></span><br><span class="line">        <span class="comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>二. JS-SDK</strong></p><p>步骤一：绑定域名<br>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><p>备注：登录后可在“开发者中心”查看对应的接口权限。</p><p>步骤二：引入JS文件</p><p>任选以下一种方式：</p><ol><li><p>在需要调用JS接口的页面引入如下JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p></li><li><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）。</p></li><li><p>npm i weixin-js-sdk –save<br>import wx from ‘weixin-js-sdk’</p></li></ol><p>备注：支持使用 AMD/CMD 标准模块加载方法加载</p><p>步骤三：通过config接口注入权限验证配置</p><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>步骤四：通过ready接口处理成功验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>步骤五：通过error接口处理失败验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接口调用说明<br>所有接口通过wx对象(也可使用jWeixin对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用参数：</p><ol><li>success：接口调用成功时执行的回调函数。</li><li>fail：接口调用失败时执行的回调函数。</li><li>complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。</li><li>cancel：用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</li><li>trigger: 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。<br>备注：不要尝试在trigger中使用ajax异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用ajax的回包会还没有返回。</li></ol><p>以上几个函数都带有一个参数，类型为对象，其中除了每个接口本身返回的数据之外，还有一个通用属性errMsg，其值格式如下：</p><p>调用成功时：”xxx:ok” ，其中xxx为调用的接口名</p><p>用户取消时：”xxx:cancel”，其中xxx为调用的接口名</p><p>调用失败时：其值为具体错误信息</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> payByJsApi () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> token = getToken()</span><br><span class="line">    <span class="keyword">this</span>.Indicator.open(&#123;</span><br><span class="line">      spinnerType: <span class="string">'double-bounce'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 调用获取签名接口</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios(testUrl + api.saveOrderByCart, &#123;token, <span class="attr">id</span>: <span class="keyword">this</span>.addressDef.id, <span class="attr">payMethod</span>: <span class="number">0</span>, <span class="attr">wxCode</span>: <span class="keyword">this</span>.code&#125;, <span class="string">'post'</span>)</span><br><span class="line">    <span class="keyword">this</span>.Indicator.close()</span><br><span class="line">    <span class="keyword">if</span> (res.error_code) <span class="keyword">return</span> <span class="keyword">this</span>.Toast(res.message)</span><br><span class="line">    <span class="keyword">this</span>.wxConfig = res.data</span><br><span class="line">    <span class="keyword">this</span>.payByWechat()</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">payByWechat() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; appId, timeStamp, nonceStr, signType, paySign, orderId &#125; = <span class="keyword">this</span>.wxConfig</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: timeStamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: paySign,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [<span class="string">'checkJsApi'</span>, <span class="string">'chooseWXPay'</span>] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">  &#125;)</span><br><span class="line">  wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">    wx.checkJsApi(&#123;</span><br><span class="line">      jsApiList: [<span class="string">'chooseWXPay'</span>],</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 以键值对的形式返回，可用的api值true，不可用为false</span></span><br><span class="line">        <span class="comment">// 如：&#123;"checkResult":&#123;"chooseImage":true&#125;,"errMsg":"checkJsApi:ok"&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (res.checkResult.chooseWXPay) &#123;</span><br><span class="line">          wx.chooseWXPay(&#123;</span><br><span class="line">            timestamp: timeStamp, <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></span><br><span class="line">            nonceStr, <span class="comment">// 支付签名随机串，不长于 32 位</span></span><br><span class="line">            package: _this.wxConfig.package, <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\*\*\*）</span></span><br><span class="line">            signType, <span class="comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span></span><br><span class="line">            paySign, <span class="comment">// 支付签名</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 支付成功后的回调函数</span></span><br><span class="line">              <span class="comment">// this.Toast('下单成功')</span></span><br><span class="line">              <span class="comment">// this.$router.push(&#123; name: 'orderDetails', params: &#123; orderId: orderId &#125; &#125;)</span></span><br><span class="line">              _this.showSendCode = <span class="literal">false</span>;</span><br><span class="line">              _this.exchangeShow = <span class="literal">true</span>;</span><br><span class="line">              _this.parOrderId = orderId;</span><br><span class="line">              _this.clearPassword()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _this.Toast(<span class="string">'当前客户端版本不支持chooseWXPay接口'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;公众号官网链接： &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/javascript/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="微信公众号" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Swiper</title>
    <link href="http://yoursite.com/2020/03/18/Swiper/"/>
    <id>http://yoursite.com/2020/03/18/Swiper/</id>
    <published>2020-03-18T02:58:53.000Z</published>
    <updated>2020-05-22T15:43:34.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网： <a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a></p><p>api文档： <a href="https://www.swiper.com.cn/api/index.html" target="_blank" rel="noopener">https://www.swiper.com.cn/api/index.html</a></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span> <span class="attr">id</span>=<span class="string">"swiper1"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span> <span class="attr">id</span>=<span class="string">"swiper2"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span> <span class="attr">id</span>=<span class="string">"swiper3"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swiper1 = <span class="keyword">new</span> Swiper(<span class="string">'#swiper1'</span>);</span><br><span class="line"><span class="keyword">var</span> swiper2 = <span class="keyword">new</span> Swiper(<span class="string">'#swiper2'</span>);</span><br><span class="line"><span class="keyword">var</span> swiper3 = <span class="keyword">new</span> Swiper(<span class="string">'#swiper3'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>slider1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>slider2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>slider3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  autoplay: <span class="literal">true</span>,<span class="comment">//可选选项，自动滑动</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//如果你初始化时没有定义Swiper实例，后面也可以通过Swiper的HTML元素来获取该实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mySwiper = <span class="built_in">document</span>.querySelector(<span class="string">'.swiper-container'</span>).swiper</span></span><br><span class="line">mySwiper.slideNext();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注： 详情请查阅api</p></blockquote><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h4 id="数据小于slidesPerView的值"><a href="#数据小于slidesPerView的值" class="headerlink" title="数据小于slidesPerView的值"></a>数据小于<code>slidesPerView</code>的值</h4><p>当<code>list.length</code> &lt; <code>slidesPerView</code>的值时，并且<code>loop: true</code>会产生数据重复</p><img src="/2020/03/18/Swiper/1.png" class="" title="数据重复"><p>解决：</p><ul><li>删除<code>loop: true</code></li><li>设置<code>slidesPerView: list.length</code></li></ul><blockquote><p>注： 第二种方法会导致当<code>list.length: 1</code>时，会占满整个空间，例：</p></blockquote><img src="/2020/03/18/Swiper/2.png" class="" title="占满空间"><h4 id="swiper与图片懒加载"><a href="#swiper与图片懒加载" class="headerlink" title="swiper与图片懒加载"></a>swiper与图片懒加载</h4><p>在swiper中添加图片时，最好不要使用v-lazy等图片懒加载功能，会使有的图片无法加载成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;官网： &lt;a href=&quot;https://www.swiper.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme</title>
    <link href="http://yoursite.com/2020/03/17/hexo-theme/"/>
    <id>http://yoursite.com/2020/03/17/hexo-theme/</id>
    <published>2020-03-17T09:24:38.000Z</published>
    <updated>2020-03-17T15:42:01.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-theme"><a href="#hexo-theme" class="headerlink" title="hexo-theme #"></a>hexo-theme <strong><sup><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">#</a></strong></h2><blockquote><p>注意：新版的 NexT 主题源码早已转移在了这个仓库 </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://github.com/theme-next/hexo-theme-next</span></span><br></pre></td></tr></table></figure><p>还在使用5.0版本同学注意了，5.0版本已经不再更新，所有问题都不再解决，请下载7.0+版本</p></blockquote><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><ul><li><p>Muse：默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</p></li><li><p>Mist：Muse 的紧凑版本，整洁有序的单栏外观</p></li><li><p>Pisces：双栏 Scheme，小家碧玉似的清新</p></li><li><p>Gemini：左侧网站信息及目录，块+片段结构布局</p></li></ul><h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Canvas-nest</span><br><span class="line">three_waves</span><br><span class="line">canvas_lines</span><br><span class="line">canvas_sphere</span><br></pre></td></tr></table></figure><p>设置方法很简单，直接设置里需要的动态背景为true。</p><h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改themes/next/_config.yml， scrollpercent 值由 false 改为 true：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><del>这个在7.0+版本好像不行</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-theme&quot;&gt;&lt;a href=&quot;#hexo-theme&quot; class=&quot;headerlink&quot; title=&quot;hexo-theme #&quot;&gt;&lt;/a&gt;hexo-theme &lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;https://github.com/th
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git question</title>
    <link href="http://yoursite.com/2020/03/14/git-exception/"/>
    <id>http://yoursite.com/2020/03/14/git-exception/</id>
    <published>2020-03-14T14:34:20.000Z</published>
    <updated>2020-06-17T14:56:01.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-流程图"><a href="#Git-流程图" class="headerlink" title="Git 流程图"></a>Git 流程图</h2><p><img src="/2020/03/14/git-exception/2.png" alt></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="fatal-HttpRequestException-encountered-发送请求时出错"><a href="#fatal-HttpRequestException-encountered-发送请求时出错" class="headerlink" title="fatal: HttpRequestException encountered. 发送请求时出错"></a>fatal: HttpRequestException encountered. 发送请求时出错</h2><p><img src="/2020/03/14/git-exception/1.png" alt></p><p>目前俩种解决方式</p><h3 id="下载Git-Credential-Manager-for-Windows最新版"><a href="#下载Git-Credential-Manager-for-Windows最新版" class="headerlink" title="下载Git-Credential-Manager-for-Windows最新版"></a>下载Git-Credential-Manager-for-Windows最新版</h3><p>Github 禁用了TLS v1.0 and v1.1，必须更新Windows的git凭证管理器。</p><p>更新管理器的方式有俩种</p><ol><li><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases" target="_blank" rel="noopener">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases</a> 直接下载</li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a> 更新git客户端</li></ol><h3 id="设置git-config"><a href="#设置git-config" class="headerlink" title="设置git config"></a>设置git config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看git配置信息</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看git用户名、密码、邮箱的配置</span></span><br><span class="line">$ git config user.name</span><br><span class="line">$ git config user.password</span><br><span class="line">$ git config user.email</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置git用户名、密码、邮箱的配置</span></span><br><span class="line">$ git config user.name <span class="string">"freedom"</span></span><br><span class="line">$ git config user.password <span class="string">"123456"</span></span><br><span class="line">$ git config user.email <span class="string">"1548429568@qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置git用户名、密码、邮箱的配置（全局配置）</span></span><br><span class="line">$ git config --global user.name 用户命</span><br><span class="line">$ git config --global user.name freedom</span><br><span class="line">$ git config --global user.password 密码</span><br><span class="line">$ git config --global user.password abc0506abc</span><br><span class="line">$ git config --global user.email 邮箱</span><br><span class="line">$ git config --global user.email <span class="string">"1548429568@qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.设置代理</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看git config列表</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><h2 id="git-commit后撤销"><a href="#git-commit后撤销" class="headerlink" title="git commit后撤销"></a>git commit后撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p>这样就成功的撤销了你的commit</p><blockquote><p>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p></blockquote><p>HEAD^的意思是上一个版本，也可以写成HEAD~1</p><p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p><h2 id="git-stash-暂存"><a href="#git-stash-暂存" class="headerlink" title="git stash 暂存"></a>git stash 暂存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash 暂存</span><br><span class="line"></span><br><span class="line">git stash pop 返回上次数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-流程图&quot;&gt;&lt;a href=&quot;#Git-流程图&quot; class=&quot;headerlink&quot; title=&quot;Git 流程图&quot;&gt;&lt;/a&gt;Git 流程图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/03/14/git-exception/2.png&quot; alt&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
